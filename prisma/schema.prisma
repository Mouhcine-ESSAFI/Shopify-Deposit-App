generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id          String    @id
  shop        String
  state       String
  isOnline    Boolean   @default(false)
  scope       String?
  expires     DateTime?
  accessToken String
  userId      BigInt?
  firstName   String?
  lastName    String?
  email       String?
  accountOwner Boolean  @default(false)
  locale      String?
  collaborator Boolean? @default(false)
  emailVerified Boolean? @default(false)
}

model DepositPlan {
  id              String   @id @default(cuid())
  shopDomain      String
  sellingPlanId   String   @unique // Made unique for relationships
  sellingPlanGid  String   
  groupId         String   
  planName        String
  merchantCode    String
  description     String?
  depositPercent  Float    @default(15.0)
  balanceDueDays  Int      @default(365)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  orders          DepositOrder[]

  @@unique([shopDomain, sellingPlanId])
  @@index([shopDomain])
  @@index([isActive])
}

// Add these new fields to your DepositOrder model in prisma/schema.prisma

model DepositOrder {
  id              String   @id @default(cuid())
  shopDomain      String
  orderId         String   
  orderGid        String   
  orderNumber     String?  
  customerId      String?
  customerEmail   String?
  
  // NEW CUSTOMER FIELDS
  customerName    String?
  customerPhone   String?
  
  // NEW TOUR/ORDER DETAILS
  tourName        String?
  travelers       Int?
  arrivalDate     DateTime?
  pickupAddress   String?
  campCategory    String?
  
  depositAmount   Float
  balanceAmount   Float
  totalAmount     Float
  depositPaid     Boolean  @default(true)
  balancePaid     Boolean  @default(false)
  balanceDueDate  DateTime
  sellingPlanId   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  plan            DepositPlan? @relation(fields: [sellingPlanId], references: [sellingPlanId])

  @@unique([shopDomain, orderId])
  @@index([shopDomain])
  @@index([balancePaid])
  @@index([balanceDueDate])
  @@index([arrivalDate]) // NEW INDEX for sorting
}

model AppConfiguration {
  id                    String   @id @default(cuid())
  shopDomain           String   @unique
  defaultDepositPercent Float    @default(15.0)
  defaultBalanceDays   Int      @default(365)
  emailNotifications   Boolean  @default(true)
  autoApplyToProducts  Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model SellingPlanConfig {
  id                String   @id @default(cuid())
  shopDomain        String
  sellingPlanGroupId String  @unique
  sellingPlanId     String
  
  // Assignment configuration
  assignmentMode    String   // "specific", "collection", "all"
  selectedProductIds String? // JSON array of product IDs
  selectedCollectionIds String? // JSON array of collection IDs
  
  // Statistics
  productsCount     Int      @default(0)
  lastSyncedAt      DateTime?
  
  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([shopDomain])
  @@index([sellingPlanGroupId])
}
