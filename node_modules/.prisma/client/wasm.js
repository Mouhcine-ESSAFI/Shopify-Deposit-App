
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  shop: 'shop',
  state: 'state',
  isOnline: 'isOnline',
  scope: 'scope',
  expires: 'expires',
  accessToken: 'accessToken',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  accountOwner: 'accountOwner',
  locale: 'locale',
  collaborator: 'collaborator',
  emailVerified: 'emailVerified'
};

exports.Prisma.DepositPlanScalarFieldEnum = {
  id: 'id',
  shopDomain: 'shopDomain',
  sellingPlanId: 'sellingPlanId',
  sellingPlanGid: 'sellingPlanGid',
  groupId: 'groupId',
  planName: 'planName',
  merchantCode: 'merchantCode',
  description: 'description',
  depositPercent: 'depositPercent',
  balanceDueDays: 'balanceDueDays',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepositOrderScalarFieldEnum = {
  id: 'id',
  shopDomain: 'shopDomain',
  orderId: 'orderId',
  orderGid: 'orderGid',
  orderNumber: 'orderNumber',
  customerId: 'customerId',
  customerEmail: 'customerEmail',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  tourName: 'tourName',
  travelers: 'travelers',
  arrivalDate: 'arrivalDate',
  pickupAddress: 'pickupAddress',
  campCategory: 'campCategory',
  depositAmount: 'depositAmount',
  balanceAmount: 'balanceAmount',
  totalAmount: 'totalAmount',
  depositPaid: 'depositPaid',
  balancePaid: 'balancePaid',
  balanceDueDate: 'balanceDueDate',
  sellingPlanId: 'sellingPlanId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppConfigurationScalarFieldEnum = {
  id: 'id',
  shopDomain: 'shopDomain',
  defaultDepositPercent: 'defaultDepositPercent',
  defaultBalanceDays: 'defaultBalanceDays',
  emailNotifications: 'emailNotifications',
  autoApplyToProducts: 'autoApplyToProducts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SellingPlanConfigScalarFieldEnum = {
  id: 'id',
  shopDomain: 'shopDomain',
  sellingPlanGroupId: 'sellingPlanGroupId',
  sellingPlanId: 'sellingPlanId',
  assignmentMode: 'assignmentMode',
  selectedProductIds: 'selectedProductIds',
  selectedCollectionIds: 'selectedCollectionIds',
  productsCount: 'productsCount',
  lastSyncedAt: 'lastSyncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Session: 'Session',
  DepositPlan: 'DepositPlan',
  DepositOrder: 'DepositOrder',
  AppConfiguration: 'AppConfiguration',
  SellingPlanConfig: 'SellingPlanConfig'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/mouhcineessafi/Desktop/shopify/deposit-app/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/mouhcineessafi/Desktop/shopify/deposit-app/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel Session {\n  id            String    @id\n  shop          String\n  state         String\n  isOnline      Boolean   @default(false)\n  scope         String?\n  expires       DateTime?\n  accessToken   String\n  userId        BigInt?\n  firstName     String?\n  lastName      String?\n  email         String?\n  accountOwner  Boolean   @default(false)\n  locale        String?\n  collaborator  Boolean?  @default(false)\n  emailVerified Boolean?  @default(false)\n}\n\nmodel DepositPlan {\n  id             String   @id @default(cuid())\n  shopDomain     String\n  sellingPlanId  String   @unique // Made unique for relationships\n  sellingPlanGid String\n  groupId        String\n  planName       String\n  merchantCode   String\n  description    String?\n  depositPercent Float    @default(15.0)\n  balanceDueDays Int      @default(365)\n  isActive       Boolean  @default(true)\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  // Relationships\n  orders DepositOrder[]\n\n  @@unique([shopDomain, sellingPlanId])\n  @@index([shopDomain])\n  @@index([isActive])\n}\n\n// Add these new fields to your DepositOrder model in prisma/schema.prisma\n\nmodel DepositOrder {\n  id            String  @id @default(cuid())\n  shopDomain    String\n  orderId       String\n  orderGid      String\n  orderNumber   String?\n  customerId    String?\n  customerEmail String?\n\n  // NEW CUSTOMER FIELDS\n  customerName  String?\n  customerPhone String?\n\n  // NEW TOUR/ORDER DETAILS\n  tourName      String?\n  travelers     Int?\n  arrivalDate   DateTime?\n  pickupAddress String?\n  campCategory  String?\n\n  depositAmount  Float\n  balanceAmount  Float\n  totalAmount    Float\n  depositPaid    Boolean  @default(true)\n  balancePaid    Boolean  @default(false)\n  balanceDueDate DateTime\n  sellingPlanId  String?\n  createdAt      DateTime @default(now())\n  updatedAt      DateTime @updatedAt\n\n  plan DepositPlan? @relation(fields: [sellingPlanId], references: [sellingPlanId])\n\n  @@unique([shopDomain, orderId])\n  @@index([shopDomain])\n  @@index([balancePaid])\n  @@index([balanceDueDate])\n  @@index([arrivalDate]) // NEW INDEX for sorting\n}\n\nmodel AppConfiguration {\n  id                    String   @id @default(cuid())\n  shopDomain            String   @unique\n  defaultDepositPercent Float    @default(15.0)\n  defaultBalanceDays    Int      @default(365)\n  emailNotifications    Boolean  @default(true)\n  autoApplyToProducts   Boolean  @default(false)\n  createdAt             DateTime @default(now())\n  updatedAt             DateTime @updatedAt\n}\n\nmodel SellingPlanConfig {\n  id                 String @id @default(cuid())\n  shopDomain         String\n  sellingPlanGroupId String @unique\n  sellingPlanId      String\n\n  // Assignment configuration\n  assignmentMode        String // \"specific\", \"collection\", \"all\"\n  selectedProductIds    String? // JSON array of product IDs\n  selectedCollectionIds String? // JSON array of collection IDs\n\n  // Statistics\n  productsCount Int       @default(0)\n  lastSyncedAt  DateTime?\n\n  // Metadata\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@index([shopDomain])\n  @@index([sellingPlanGroupId])\n}\n",
  "inlineSchemaHash": "8c4adf00a7db18711551c1a73e006703c7a3121b0365b2c326643d2942160c35",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shop\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isOnline\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accessToken\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"BigInt\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"accountOwner\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"locale\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"collaborator\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"emailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"DepositPlan\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shopDomain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellingPlanId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellingPlanGid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"groupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"planName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"merchantCode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"depositPercent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"balanceDueDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"orders\",\"kind\":\"object\",\"type\":\"DepositOrder\",\"relationName\":\"DepositOrderToDepositPlan\"}],\"dbName\":null},\"DepositOrder\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shopDomain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderGid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"customerPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tourName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"travelers\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"arrivalDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pickupAddress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"campCategory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"depositAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"balanceAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"totalAmount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"depositPaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"balancePaid\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"balanceDueDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"sellingPlanId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"plan\",\"kind\":\"object\",\"type\":\"DepositPlan\",\"relationName\":\"DepositOrderToDepositPlan\"}],\"dbName\":null},\"AppConfiguration\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shopDomain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"defaultDepositPercent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"defaultBalanceDays\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"emailNotifications\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"autoApplyToProducts\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SellingPlanConfig\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"shopDomain\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellingPlanGroupId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sellingPlanId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"assignmentMode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"selectedProductIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"selectedCollectionIds\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"productsCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastSyncedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

