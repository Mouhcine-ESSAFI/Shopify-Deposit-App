
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model DepositPlan
 * 
 */
export type DepositPlan = $Result.DefaultSelection<Prisma.$DepositPlanPayload>
/**
 * Model DepositOrder
 * 
 */
export type DepositOrder = $Result.DefaultSelection<Prisma.$DepositOrderPayload>
/**
 * Model AppConfiguration
 * 
 */
export type AppConfiguration = $Result.DefaultSelection<Prisma.$AppConfigurationPayload>
/**
 * Model SellingPlanConfig
 * 
 */
export type SellingPlanConfig = $Result.DefaultSelection<Prisma.$SellingPlanConfigPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.depositPlan`: Exposes CRUD operations for the **DepositPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepositPlans
    * const depositPlans = await prisma.depositPlan.findMany()
    * ```
    */
  get depositPlan(): Prisma.DepositPlanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.depositOrder`: Exposes CRUD operations for the **DepositOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepositOrders
    * const depositOrders = await prisma.depositOrder.findMany()
    * ```
    */
  get depositOrder(): Prisma.DepositOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appConfiguration`: Exposes CRUD operations for the **AppConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppConfigurations
    * const appConfigurations = await prisma.appConfiguration.findMany()
    * ```
    */
  get appConfiguration(): Prisma.AppConfigurationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sellingPlanConfig`: Exposes CRUD operations for the **SellingPlanConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SellingPlanConfigs
    * const sellingPlanConfigs = await prisma.sellingPlanConfig.findMany()
    * ```
    */
  get sellingPlanConfig(): Prisma.SellingPlanConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Session: 'Session',
    DepositPlan: 'DepositPlan',
    DepositOrder: 'DepositOrder',
    AppConfiguration: 'AppConfiguration',
    SellingPlanConfig: 'SellingPlanConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "session" | "depositPlan" | "depositOrder" | "appConfiguration" | "sellingPlanConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      DepositPlan: {
        payload: Prisma.$DepositPlanPayload<ExtArgs>
        fields: Prisma.DepositPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepositPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepositPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          findFirst: {
            args: Prisma.DepositPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepositPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          findMany: {
            args: Prisma.DepositPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>[]
          }
          create: {
            args: Prisma.DepositPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          createMany: {
            args: Prisma.DepositPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepositPlanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>[]
          }
          delete: {
            args: Prisma.DepositPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          update: {
            args: Prisma.DepositPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          deleteMany: {
            args: Prisma.DepositPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepositPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepositPlanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>[]
          }
          upsert: {
            args: Prisma.DepositPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositPlanPayload>
          }
          aggregate: {
            args: Prisma.DepositPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepositPlan>
          }
          groupBy: {
            args: Prisma.DepositPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepositPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepositPlanCountArgs<ExtArgs>
            result: $Utils.Optional<DepositPlanCountAggregateOutputType> | number
          }
        }
      }
      DepositOrder: {
        payload: Prisma.$DepositOrderPayload<ExtArgs>
        fields: Prisma.DepositOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepositOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepositOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          findFirst: {
            args: Prisma.DepositOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepositOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          findMany: {
            args: Prisma.DepositOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>[]
          }
          create: {
            args: Prisma.DepositOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          createMany: {
            args: Prisma.DepositOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepositOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>[]
          }
          delete: {
            args: Prisma.DepositOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          update: {
            args: Prisma.DepositOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          deleteMany: {
            args: Prisma.DepositOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepositOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepositOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>[]
          }
          upsert: {
            args: Prisma.DepositOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepositOrderPayload>
          }
          aggregate: {
            args: Prisma.DepositOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepositOrder>
          }
          groupBy: {
            args: Prisma.DepositOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepositOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepositOrderCountArgs<ExtArgs>
            result: $Utils.Optional<DepositOrderCountAggregateOutputType> | number
          }
        }
      }
      AppConfiguration: {
        payload: Prisma.$AppConfigurationPayload<ExtArgs>
        fields: Prisma.AppConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          findFirst: {
            args: Prisma.AppConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          findMany: {
            args: Prisma.AppConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>[]
          }
          create: {
            args: Prisma.AppConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          createMany: {
            args: Prisma.AppConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>[]
          }
          delete: {
            args: Prisma.AppConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          update: {
            args: Prisma.AppConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.AppConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppConfigurationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>[]
          }
          upsert: {
            args: Prisma.AppConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppConfigurationPayload>
          }
          aggregate: {
            args: Prisma.AppConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppConfiguration>
          }
          groupBy: {
            args: Prisma.AppConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<AppConfigurationCountAggregateOutputType> | number
          }
        }
      }
      SellingPlanConfig: {
        payload: Prisma.$SellingPlanConfigPayload<ExtArgs>
        fields: Prisma.SellingPlanConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellingPlanConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellingPlanConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          findFirst: {
            args: Prisma.SellingPlanConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellingPlanConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          findMany: {
            args: Prisma.SellingPlanConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>[]
          }
          create: {
            args: Prisma.SellingPlanConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          createMany: {
            args: Prisma.SellingPlanConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SellingPlanConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>[]
          }
          delete: {
            args: Prisma.SellingPlanConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          update: {
            args: Prisma.SellingPlanConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          deleteMany: {
            args: Prisma.SellingPlanConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SellingPlanConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SellingPlanConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>[]
          }
          upsert: {
            args: Prisma.SellingPlanConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellingPlanConfigPayload>
          }
          aggregate: {
            args: Prisma.SellingPlanConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSellingPlanConfig>
          }
          groupBy: {
            args: Prisma.SellingPlanConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SellingPlanConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellingPlanConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SellingPlanConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    session?: SessionOmit
    depositPlan?: DepositPlanOmit
    depositOrder?: DepositOrderOmit
    appConfiguration?: AppConfigurationOmit
    sellingPlanConfig?: SellingPlanConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DepositPlanCountOutputType
   */

  export type DepositPlanCountOutputType = {
    orders: number
  }

  export type DepositPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DepositPlanCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * DepositPlanCountOutputType without action
   */
  export type DepositPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlanCountOutputType
     */
    select?: DepositPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepositPlanCountOutputType without action
   */
  export type DepositPlanCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepositOrderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: bigint | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    shop: number
    state: number
    isOnline: number
    scope: number
    expires: number
    accessToken: number
    userId: number
    firstName: number
    lastName: number
    email: number
    accountOwner: number
    locale: number
    collaborator: number
    emailVerified: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    shop: string
    state: string
    isOnline: boolean
    scope: string | null
    expires: Date | null
    accessToken: string
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shop" | "state" | "isOnline" | "scope" | "expires" | "accessToken" | "userId" | "firstName" | "lastName" | "email" | "accountOwner" | "locale" | "collaborator" | "emailVerified", ExtArgs["result"]["session"]>

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shop: string
      state: string
      isOnline: boolean
      scope: string | null
      expires: Date | null
      accessToken: string
      userId: bigint | null
      firstName: string | null
      lastName: string | null
      email: string | null
      accountOwner: boolean
      locale: string | null
      collaborator: boolean | null
      emailVerified: boolean | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly shop: FieldRef<"Session", 'String'>
    readonly state: FieldRef<"Session", 'String'>
    readonly isOnline: FieldRef<"Session", 'Boolean'>
    readonly scope: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly accessToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'BigInt'>
    readonly firstName: FieldRef<"Session", 'String'>
    readonly lastName: FieldRef<"Session", 'String'>
    readonly email: FieldRef<"Session", 'String'>
    readonly accountOwner: FieldRef<"Session", 'Boolean'>
    readonly locale: FieldRef<"Session", 'String'>
    readonly collaborator: FieldRef<"Session", 'Boolean'>
    readonly emailVerified: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
  }


  /**
   * Model DepositPlan
   */

  export type AggregateDepositPlan = {
    _count: DepositPlanCountAggregateOutputType | null
    _avg: DepositPlanAvgAggregateOutputType | null
    _sum: DepositPlanSumAggregateOutputType | null
    _min: DepositPlanMinAggregateOutputType | null
    _max: DepositPlanMaxAggregateOutputType | null
  }

  export type DepositPlanAvgAggregateOutputType = {
    depositPercent: number | null
    balanceDueDays: number | null
  }

  export type DepositPlanSumAggregateOutputType = {
    depositPercent: number | null
    balanceDueDays: number | null
  }

  export type DepositPlanMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    sellingPlanId: string | null
    sellingPlanGid: string | null
    groupId: string | null
    planName: string | null
    merchantCode: string | null
    description: string | null
    depositPercent: number | null
    balanceDueDays: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepositPlanMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    sellingPlanId: string | null
    sellingPlanGid: string | null
    groupId: string | null
    planName: string | null
    merchantCode: string | null
    description: string | null
    depositPercent: number | null
    balanceDueDays: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepositPlanCountAggregateOutputType = {
    id: number
    shopDomain: number
    sellingPlanId: number
    sellingPlanGid: number
    groupId: number
    planName: number
    merchantCode: number
    description: number
    depositPercent: number
    balanceDueDays: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepositPlanAvgAggregateInputType = {
    depositPercent?: true
    balanceDueDays?: true
  }

  export type DepositPlanSumAggregateInputType = {
    depositPercent?: true
    balanceDueDays?: true
  }

  export type DepositPlanMinAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanId?: true
    sellingPlanGid?: true
    groupId?: true
    planName?: true
    merchantCode?: true
    description?: true
    depositPercent?: true
    balanceDueDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepositPlanMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanId?: true
    sellingPlanGid?: true
    groupId?: true
    planName?: true
    merchantCode?: true
    description?: true
    depositPercent?: true
    balanceDueDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepositPlanCountAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanId?: true
    sellingPlanGid?: true
    groupId?: true
    planName?: true
    merchantCode?: true
    description?: true
    depositPercent?: true
    balanceDueDays?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepositPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositPlan to aggregate.
     */
    where?: DepositPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositPlans to fetch.
     */
    orderBy?: DepositPlanOrderByWithRelationInput | DepositPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepositPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepositPlans
    **/
    _count?: true | DepositPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepositPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepositPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepositPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepositPlanMaxAggregateInputType
  }

  export type GetDepositPlanAggregateType<T extends DepositPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateDepositPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepositPlan[P]>
      : GetScalarType<T[P], AggregateDepositPlan[P]>
  }




  export type DepositPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepositPlanWhereInput
    orderBy?: DepositPlanOrderByWithAggregationInput | DepositPlanOrderByWithAggregationInput[]
    by: DepositPlanScalarFieldEnum[] | DepositPlanScalarFieldEnum
    having?: DepositPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepositPlanCountAggregateInputType | true
    _avg?: DepositPlanAvgAggregateInputType
    _sum?: DepositPlanSumAggregateInputType
    _min?: DepositPlanMinAggregateInputType
    _max?: DepositPlanMaxAggregateInputType
  }

  export type DepositPlanGroupByOutputType = {
    id: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description: string | null
    depositPercent: number
    balanceDueDays: number
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DepositPlanCountAggregateOutputType | null
    _avg: DepositPlanAvgAggregateOutputType | null
    _sum: DepositPlanSumAggregateOutputType | null
    _min: DepositPlanMinAggregateOutputType | null
    _max: DepositPlanMaxAggregateOutputType | null
  }

  type GetDepositPlanGroupByPayload<T extends DepositPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepositPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepositPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepositPlanGroupByOutputType[P]>
            : GetScalarType<T[P], DepositPlanGroupByOutputType[P]>
        }
      >
    >


  export type DepositPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanId?: boolean
    sellingPlanGid?: boolean
    groupId?: boolean
    planName?: boolean
    merchantCode?: boolean
    description?: boolean
    depositPercent?: boolean
    balanceDueDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    orders?: boolean | DepositPlan$ordersArgs<ExtArgs>
    _count?: boolean | DepositPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["depositPlan"]>

  export type DepositPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanId?: boolean
    sellingPlanGid?: boolean
    groupId?: boolean
    planName?: boolean
    merchantCode?: boolean
    description?: boolean
    depositPercent?: boolean
    balanceDueDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["depositPlan"]>

  export type DepositPlanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanId?: boolean
    sellingPlanGid?: boolean
    groupId?: boolean
    planName?: boolean
    merchantCode?: boolean
    description?: boolean
    depositPercent?: boolean
    balanceDueDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["depositPlan"]>

  export type DepositPlanSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    sellingPlanId?: boolean
    sellingPlanGid?: boolean
    groupId?: boolean
    planName?: boolean
    merchantCode?: boolean
    description?: boolean
    depositPercent?: boolean
    balanceDueDays?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepositPlanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shopDomain" | "sellingPlanId" | "sellingPlanGid" | "groupId" | "planName" | "merchantCode" | "description" | "depositPercent" | "balanceDueDays" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["depositPlan"]>
  export type DepositPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DepositPlan$ordersArgs<ExtArgs>
    _count?: boolean | DepositPlanCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepositPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DepositPlanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepositPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepositPlan"
    objects: {
      orders: Prisma.$DepositOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      sellingPlanId: string
      sellingPlanGid: string
      groupId: string
      planName: string
      merchantCode: string
      description: string | null
      depositPercent: number
      balanceDueDays: number
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["depositPlan"]>
    composites: {}
  }

  type DepositPlanGetPayload<S extends boolean | null | undefined | DepositPlanDefaultArgs> = $Result.GetResult<Prisma.$DepositPlanPayload, S>

  type DepositPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepositPlanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepositPlanCountAggregateInputType | true
    }

  export interface DepositPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepositPlan'], meta: { name: 'DepositPlan' } }
    /**
     * Find zero or one DepositPlan that matches the filter.
     * @param {DepositPlanFindUniqueArgs} args - Arguments to find a DepositPlan
     * @example
     * // Get one DepositPlan
     * const depositPlan = await prisma.depositPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepositPlanFindUniqueArgs>(args: SelectSubset<T, DepositPlanFindUniqueArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepositPlan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepositPlanFindUniqueOrThrowArgs} args - Arguments to find a DepositPlan
     * @example
     * // Get one DepositPlan
     * const depositPlan = await prisma.depositPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepositPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, DepositPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepositPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanFindFirstArgs} args - Arguments to find a DepositPlan
     * @example
     * // Get one DepositPlan
     * const depositPlan = await prisma.depositPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepositPlanFindFirstArgs>(args?: SelectSubset<T, DepositPlanFindFirstArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepositPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanFindFirstOrThrowArgs} args - Arguments to find a DepositPlan
     * @example
     * // Get one DepositPlan
     * const depositPlan = await prisma.depositPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepositPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, DepositPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepositPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepositPlans
     * const depositPlans = await prisma.depositPlan.findMany()
     * 
     * // Get first 10 DepositPlans
     * const depositPlans = await prisma.depositPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const depositPlanWithIdOnly = await prisma.depositPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepositPlanFindManyArgs>(args?: SelectSubset<T, DepositPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepositPlan.
     * @param {DepositPlanCreateArgs} args - Arguments to create a DepositPlan.
     * @example
     * // Create one DepositPlan
     * const DepositPlan = await prisma.depositPlan.create({
     *   data: {
     *     // ... data to create a DepositPlan
     *   }
     * })
     * 
     */
    create<T extends DepositPlanCreateArgs>(args: SelectSubset<T, DepositPlanCreateArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepositPlans.
     * @param {DepositPlanCreateManyArgs} args - Arguments to create many DepositPlans.
     * @example
     * // Create many DepositPlans
     * const depositPlan = await prisma.depositPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepositPlanCreateManyArgs>(args?: SelectSubset<T, DepositPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepositPlans and returns the data saved in the database.
     * @param {DepositPlanCreateManyAndReturnArgs} args - Arguments to create many DepositPlans.
     * @example
     * // Create many DepositPlans
     * const depositPlan = await prisma.depositPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepositPlans and only return the `id`
     * const depositPlanWithIdOnly = await prisma.depositPlan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepositPlanCreateManyAndReturnArgs>(args?: SelectSubset<T, DepositPlanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepositPlan.
     * @param {DepositPlanDeleteArgs} args - Arguments to delete one DepositPlan.
     * @example
     * // Delete one DepositPlan
     * const DepositPlan = await prisma.depositPlan.delete({
     *   where: {
     *     // ... filter to delete one DepositPlan
     *   }
     * })
     * 
     */
    delete<T extends DepositPlanDeleteArgs>(args: SelectSubset<T, DepositPlanDeleteArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepositPlan.
     * @param {DepositPlanUpdateArgs} args - Arguments to update one DepositPlan.
     * @example
     * // Update one DepositPlan
     * const depositPlan = await prisma.depositPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepositPlanUpdateArgs>(args: SelectSubset<T, DepositPlanUpdateArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepositPlans.
     * @param {DepositPlanDeleteManyArgs} args - Arguments to filter DepositPlans to delete.
     * @example
     * // Delete a few DepositPlans
     * const { count } = await prisma.depositPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepositPlanDeleteManyArgs>(args?: SelectSubset<T, DepositPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepositPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepositPlans
     * const depositPlan = await prisma.depositPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepositPlanUpdateManyArgs>(args: SelectSubset<T, DepositPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepositPlans and returns the data updated in the database.
     * @param {DepositPlanUpdateManyAndReturnArgs} args - Arguments to update many DepositPlans.
     * @example
     * // Update many DepositPlans
     * const depositPlan = await prisma.depositPlan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepositPlans and only return the `id`
     * const depositPlanWithIdOnly = await prisma.depositPlan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepositPlanUpdateManyAndReturnArgs>(args: SelectSubset<T, DepositPlanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepositPlan.
     * @param {DepositPlanUpsertArgs} args - Arguments to update or create a DepositPlan.
     * @example
     * // Update or create a DepositPlan
     * const depositPlan = await prisma.depositPlan.upsert({
     *   create: {
     *     // ... data to create a DepositPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepositPlan we want to update
     *   }
     * })
     */
    upsert<T extends DepositPlanUpsertArgs>(args: SelectSubset<T, DepositPlanUpsertArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepositPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanCountArgs} args - Arguments to filter DepositPlans to count.
     * @example
     * // Count the number of DepositPlans
     * const count = await prisma.depositPlan.count({
     *   where: {
     *     // ... the filter for the DepositPlans we want to count
     *   }
     * })
    **/
    count<T extends DepositPlanCountArgs>(
      args?: Subset<T, DepositPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepositPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepositPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepositPlanAggregateArgs>(args: Subset<T, DepositPlanAggregateArgs>): Prisma.PrismaPromise<GetDepositPlanAggregateType<T>>

    /**
     * Group by DepositPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepositPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepositPlanGroupByArgs['orderBy'] }
        : { orderBy?: DepositPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepositPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepositPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepositPlan model
   */
  readonly fields: DepositPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepositPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepositPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    orders<T extends DepositPlan$ordersArgs<ExtArgs> = {}>(args?: Subset<T, DepositPlan$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepositPlan model
   */
  interface DepositPlanFieldRefs {
    readonly id: FieldRef<"DepositPlan", 'String'>
    readonly shopDomain: FieldRef<"DepositPlan", 'String'>
    readonly sellingPlanId: FieldRef<"DepositPlan", 'String'>
    readonly sellingPlanGid: FieldRef<"DepositPlan", 'String'>
    readonly groupId: FieldRef<"DepositPlan", 'String'>
    readonly planName: FieldRef<"DepositPlan", 'String'>
    readonly merchantCode: FieldRef<"DepositPlan", 'String'>
    readonly description: FieldRef<"DepositPlan", 'String'>
    readonly depositPercent: FieldRef<"DepositPlan", 'Float'>
    readonly balanceDueDays: FieldRef<"DepositPlan", 'Int'>
    readonly isActive: FieldRef<"DepositPlan", 'Boolean'>
    readonly createdAt: FieldRef<"DepositPlan", 'DateTime'>
    readonly updatedAt: FieldRef<"DepositPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DepositPlan findUnique
   */
  export type DepositPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter, which DepositPlan to fetch.
     */
    where: DepositPlanWhereUniqueInput
  }

  /**
   * DepositPlan findUniqueOrThrow
   */
  export type DepositPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter, which DepositPlan to fetch.
     */
    where: DepositPlanWhereUniqueInput
  }

  /**
   * DepositPlan findFirst
   */
  export type DepositPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter, which DepositPlan to fetch.
     */
    where?: DepositPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositPlans to fetch.
     */
    orderBy?: DepositPlanOrderByWithRelationInput | DepositPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositPlans.
     */
    cursor?: DepositPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositPlans.
     */
    distinct?: DepositPlanScalarFieldEnum | DepositPlanScalarFieldEnum[]
  }

  /**
   * DepositPlan findFirstOrThrow
   */
  export type DepositPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter, which DepositPlan to fetch.
     */
    where?: DepositPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositPlans to fetch.
     */
    orderBy?: DepositPlanOrderByWithRelationInput | DepositPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositPlans.
     */
    cursor?: DepositPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositPlans.
     */
    distinct?: DepositPlanScalarFieldEnum | DepositPlanScalarFieldEnum[]
  }

  /**
   * DepositPlan findMany
   */
  export type DepositPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter, which DepositPlans to fetch.
     */
    where?: DepositPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositPlans to fetch.
     */
    orderBy?: DepositPlanOrderByWithRelationInput | DepositPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepositPlans.
     */
    cursor?: DepositPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositPlans.
     */
    skip?: number
    distinct?: DepositPlanScalarFieldEnum | DepositPlanScalarFieldEnum[]
  }

  /**
   * DepositPlan create
   */
  export type DepositPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a DepositPlan.
     */
    data: XOR<DepositPlanCreateInput, DepositPlanUncheckedCreateInput>
  }

  /**
   * DepositPlan createMany
   */
  export type DepositPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepositPlans.
     */
    data: DepositPlanCreateManyInput | DepositPlanCreateManyInput[]
  }

  /**
   * DepositPlan createManyAndReturn
   */
  export type DepositPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * The data used to create many DepositPlans.
     */
    data: DepositPlanCreateManyInput | DepositPlanCreateManyInput[]
  }

  /**
   * DepositPlan update
   */
  export type DepositPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a DepositPlan.
     */
    data: XOR<DepositPlanUpdateInput, DepositPlanUncheckedUpdateInput>
    /**
     * Choose, which DepositPlan to update.
     */
    where: DepositPlanWhereUniqueInput
  }

  /**
   * DepositPlan updateMany
   */
  export type DepositPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepositPlans.
     */
    data: XOR<DepositPlanUpdateManyMutationInput, DepositPlanUncheckedUpdateManyInput>
    /**
     * Filter which DepositPlans to update
     */
    where?: DepositPlanWhereInput
    /**
     * Limit how many DepositPlans to update.
     */
    limit?: number
  }

  /**
   * DepositPlan updateManyAndReturn
   */
  export type DepositPlanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * The data used to update DepositPlans.
     */
    data: XOR<DepositPlanUpdateManyMutationInput, DepositPlanUncheckedUpdateManyInput>
    /**
     * Filter which DepositPlans to update
     */
    where?: DepositPlanWhereInput
    /**
     * Limit how many DepositPlans to update.
     */
    limit?: number
  }

  /**
   * DepositPlan upsert
   */
  export type DepositPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the DepositPlan to update in case it exists.
     */
    where: DepositPlanWhereUniqueInput
    /**
     * In case the DepositPlan found by the `where` argument doesn't exist, create a new DepositPlan with this data.
     */
    create: XOR<DepositPlanCreateInput, DepositPlanUncheckedCreateInput>
    /**
     * In case the DepositPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepositPlanUpdateInput, DepositPlanUncheckedUpdateInput>
  }

  /**
   * DepositPlan delete
   */
  export type DepositPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    /**
     * Filter which DepositPlan to delete.
     */
    where: DepositPlanWhereUniqueInput
  }

  /**
   * DepositPlan deleteMany
   */
  export type DepositPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositPlans to delete
     */
    where?: DepositPlanWhereInput
    /**
     * Limit how many DepositPlans to delete.
     */
    limit?: number
  }

  /**
   * DepositPlan.orders
   */
  export type DepositPlan$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    where?: DepositOrderWhereInput
    orderBy?: DepositOrderOrderByWithRelationInput | DepositOrderOrderByWithRelationInput[]
    cursor?: DepositOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepositOrderScalarFieldEnum | DepositOrderScalarFieldEnum[]
  }

  /**
   * DepositPlan without action
   */
  export type DepositPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
  }


  /**
   * Model DepositOrder
   */

  export type AggregateDepositOrder = {
    _count: DepositOrderCountAggregateOutputType | null
    _avg: DepositOrderAvgAggregateOutputType | null
    _sum: DepositOrderSumAggregateOutputType | null
    _min: DepositOrderMinAggregateOutputType | null
    _max: DepositOrderMaxAggregateOutputType | null
  }

  export type DepositOrderAvgAggregateOutputType = {
    travelers: number | null
    depositAmount: number | null
    balanceAmount: number | null
    totalAmount: number | null
  }

  export type DepositOrderSumAggregateOutputType = {
    travelers: number | null
    depositAmount: number | null
    balanceAmount: number | null
    totalAmount: number | null
  }

  export type DepositOrderMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    orderId: string | null
    orderGid: string | null
    orderNumber: string | null
    customerId: string | null
    customerEmail: string | null
    customerName: string | null
    customerPhone: string | null
    tourName: string | null
    travelers: number | null
    arrivalDate: Date | null
    pickupAddress: string | null
    campCategory: string | null
    depositAmount: number | null
    balanceAmount: number | null
    totalAmount: number | null
    depositPaid: boolean | null
    balancePaid: boolean | null
    balanceDueDate: Date | null
    sellingPlanId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepositOrderMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    orderId: string | null
    orderGid: string | null
    orderNumber: string | null
    customerId: string | null
    customerEmail: string | null
    customerName: string | null
    customerPhone: string | null
    tourName: string | null
    travelers: number | null
    arrivalDate: Date | null
    pickupAddress: string | null
    campCategory: string | null
    depositAmount: number | null
    balanceAmount: number | null
    totalAmount: number | null
    depositPaid: boolean | null
    balancePaid: boolean | null
    balanceDueDate: Date | null
    sellingPlanId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepositOrderCountAggregateOutputType = {
    id: number
    shopDomain: number
    orderId: number
    orderGid: number
    orderNumber: number
    customerId: number
    customerEmail: number
    customerName: number
    customerPhone: number
    tourName: number
    travelers: number
    arrivalDate: number
    pickupAddress: number
    campCategory: number
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid: number
    balancePaid: number
    balanceDueDate: number
    sellingPlanId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepositOrderAvgAggregateInputType = {
    travelers?: true
    depositAmount?: true
    balanceAmount?: true
    totalAmount?: true
  }

  export type DepositOrderSumAggregateInputType = {
    travelers?: true
    depositAmount?: true
    balanceAmount?: true
    totalAmount?: true
  }

  export type DepositOrderMinAggregateInputType = {
    id?: true
    shopDomain?: true
    orderId?: true
    orderGid?: true
    orderNumber?: true
    customerId?: true
    customerEmail?: true
    customerName?: true
    customerPhone?: true
    tourName?: true
    travelers?: true
    arrivalDate?: true
    pickupAddress?: true
    campCategory?: true
    depositAmount?: true
    balanceAmount?: true
    totalAmount?: true
    depositPaid?: true
    balancePaid?: true
    balanceDueDate?: true
    sellingPlanId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepositOrderMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    orderId?: true
    orderGid?: true
    orderNumber?: true
    customerId?: true
    customerEmail?: true
    customerName?: true
    customerPhone?: true
    tourName?: true
    travelers?: true
    arrivalDate?: true
    pickupAddress?: true
    campCategory?: true
    depositAmount?: true
    balanceAmount?: true
    totalAmount?: true
    depositPaid?: true
    balancePaid?: true
    balanceDueDate?: true
    sellingPlanId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepositOrderCountAggregateInputType = {
    id?: true
    shopDomain?: true
    orderId?: true
    orderGid?: true
    orderNumber?: true
    customerId?: true
    customerEmail?: true
    customerName?: true
    customerPhone?: true
    tourName?: true
    travelers?: true
    arrivalDate?: true
    pickupAddress?: true
    campCategory?: true
    depositAmount?: true
    balanceAmount?: true
    totalAmount?: true
    depositPaid?: true
    balancePaid?: true
    balanceDueDate?: true
    sellingPlanId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepositOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositOrder to aggregate.
     */
    where?: DepositOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositOrders to fetch.
     */
    orderBy?: DepositOrderOrderByWithRelationInput | DepositOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepositOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepositOrders
    **/
    _count?: true | DepositOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepositOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepositOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepositOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepositOrderMaxAggregateInputType
  }

  export type GetDepositOrderAggregateType<T extends DepositOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateDepositOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepositOrder[P]>
      : GetScalarType<T[P], AggregateDepositOrder[P]>
  }




  export type DepositOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepositOrderWhereInput
    orderBy?: DepositOrderOrderByWithAggregationInput | DepositOrderOrderByWithAggregationInput[]
    by: DepositOrderScalarFieldEnum[] | DepositOrderScalarFieldEnum
    having?: DepositOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepositOrderCountAggregateInputType | true
    _avg?: DepositOrderAvgAggregateInputType
    _sum?: DepositOrderSumAggregateInputType
    _min?: DepositOrderMinAggregateInputType
    _max?: DepositOrderMaxAggregateInputType
  }

  export type DepositOrderGroupByOutputType = {
    id: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber: string | null
    customerId: string | null
    customerEmail: string | null
    customerName: string | null
    customerPhone: string | null
    tourName: string | null
    travelers: number | null
    arrivalDate: Date | null
    pickupAddress: string | null
    campCategory: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid: boolean
    balancePaid: boolean
    balanceDueDate: Date
    sellingPlanId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DepositOrderCountAggregateOutputType | null
    _avg: DepositOrderAvgAggregateOutputType | null
    _sum: DepositOrderSumAggregateOutputType | null
    _min: DepositOrderMinAggregateOutputType | null
    _max: DepositOrderMaxAggregateOutputType | null
  }

  type GetDepositOrderGroupByPayload<T extends DepositOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepositOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepositOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepositOrderGroupByOutputType[P]>
            : GetScalarType<T[P], DepositOrderGroupByOutputType[P]>
        }
      >
    >


  export type DepositOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    orderId?: boolean
    orderGid?: boolean
    orderNumber?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerName?: boolean
    customerPhone?: boolean
    tourName?: boolean
    travelers?: boolean
    arrivalDate?: boolean
    pickupAddress?: boolean
    campCategory?: boolean
    depositAmount?: boolean
    balanceAmount?: boolean
    totalAmount?: boolean
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate?: boolean
    sellingPlanId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }, ExtArgs["result"]["depositOrder"]>

  export type DepositOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    orderId?: boolean
    orderGid?: boolean
    orderNumber?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerName?: boolean
    customerPhone?: boolean
    tourName?: boolean
    travelers?: boolean
    arrivalDate?: boolean
    pickupAddress?: boolean
    campCategory?: boolean
    depositAmount?: boolean
    balanceAmount?: boolean
    totalAmount?: boolean
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate?: boolean
    sellingPlanId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }, ExtArgs["result"]["depositOrder"]>

  export type DepositOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    orderId?: boolean
    orderGid?: boolean
    orderNumber?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerName?: boolean
    customerPhone?: boolean
    tourName?: boolean
    travelers?: boolean
    arrivalDate?: boolean
    pickupAddress?: boolean
    campCategory?: boolean
    depositAmount?: boolean
    balanceAmount?: boolean
    totalAmount?: boolean
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate?: boolean
    sellingPlanId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }, ExtArgs["result"]["depositOrder"]>

  export type DepositOrderSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    orderId?: boolean
    orderGid?: boolean
    orderNumber?: boolean
    customerId?: boolean
    customerEmail?: boolean
    customerName?: boolean
    customerPhone?: boolean
    tourName?: boolean
    travelers?: boolean
    arrivalDate?: boolean
    pickupAddress?: boolean
    campCategory?: boolean
    depositAmount?: boolean
    balanceAmount?: boolean
    totalAmount?: boolean
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate?: boolean
    sellingPlanId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepositOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shopDomain" | "orderId" | "orderGid" | "orderNumber" | "customerId" | "customerEmail" | "customerName" | "customerPhone" | "tourName" | "travelers" | "arrivalDate" | "pickupAddress" | "campCategory" | "depositAmount" | "balanceAmount" | "totalAmount" | "depositPaid" | "balancePaid" | "balanceDueDate" | "sellingPlanId" | "createdAt" | "updatedAt", ExtArgs["result"]["depositOrder"]>
  export type DepositOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }
  export type DepositOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }
  export type DepositOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | DepositOrder$planArgs<ExtArgs>
  }

  export type $DepositOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepositOrder"
    objects: {
      plan: Prisma.$DepositPlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      orderId: string
      orderGid: string
      orderNumber: string | null
      customerId: string | null
      customerEmail: string | null
      customerName: string | null
      customerPhone: string | null
      tourName: string | null
      travelers: number | null
      arrivalDate: Date | null
      pickupAddress: string | null
      campCategory: string | null
      depositAmount: number
      balanceAmount: number
      totalAmount: number
      depositPaid: boolean
      balancePaid: boolean
      balanceDueDate: Date
      sellingPlanId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["depositOrder"]>
    composites: {}
  }

  type DepositOrderGetPayload<S extends boolean | null | undefined | DepositOrderDefaultArgs> = $Result.GetResult<Prisma.$DepositOrderPayload, S>

  type DepositOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepositOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepositOrderCountAggregateInputType | true
    }

  export interface DepositOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepositOrder'], meta: { name: 'DepositOrder' } }
    /**
     * Find zero or one DepositOrder that matches the filter.
     * @param {DepositOrderFindUniqueArgs} args - Arguments to find a DepositOrder
     * @example
     * // Get one DepositOrder
     * const depositOrder = await prisma.depositOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepositOrderFindUniqueArgs>(args: SelectSubset<T, DepositOrderFindUniqueArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepositOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepositOrderFindUniqueOrThrowArgs} args - Arguments to find a DepositOrder
     * @example
     * // Get one DepositOrder
     * const depositOrder = await prisma.depositOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepositOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, DepositOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepositOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderFindFirstArgs} args - Arguments to find a DepositOrder
     * @example
     * // Get one DepositOrder
     * const depositOrder = await prisma.depositOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepositOrderFindFirstArgs>(args?: SelectSubset<T, DepositOrderFindFirstArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepositOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderFindFirstOrThrowArgs} args - Arguments to find a DepositOrder
     * @example
     * // Get one DepositOrder
     * const depositOrder = await prisma.depositOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepositOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, DepositOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepositOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepositOrders
     * const depositOrders = await prisma.depositOrder.findMany()
     * 
     * // Get first 10 DepositOrders
     * const depositOrders = await prisma.depositOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const depositOrderWithIdOnly = await prisma.depositOrder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepositOrderFindManyArgs>(args?: SelectSubset<T, DepositOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepositOrder.
     * @param {DepositOrderCreateArgs} args - Arguments to create a DepositOrder.
     * @example
     * // Create one DepositOrder
     * const DepositOrder = await prisma.depositOrder.create({
     *   data: {
     *     // ... data to create a DepositOrder
     *   }
     * })
     * 
     */
    create<T extends DepositOrderCreateArgs>(args: SelectSubset<T, DepositOrderCreateArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepositOrders.
     * @param {DepositOrderCreateManyArgs} args - Arguments to create many DepositOrders.
     * @example
     * // Create many DepositOrders
     * const depositOrder = await prisma.depositOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepositOrderCreateManyArgs>(args?: SelectSubset<T, DepositOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepositOrders and returns the data saved in the database.
     * @param {DepositOrderCreateManyAndReturnArgs} args - Arguments to create many DepositOrders.
     * @example
     * // Create many DepositOrders
     * const depositOrder = await prisma.depositOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepositOrders and only return the `id`
     * const depositOrderWithIdOnly = await prisma.depositOrder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepositOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, DepositOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepositOrder.
     * @param {DepositOrderDeleteArgs} args - Arguments to delete one DepositOrder.
     * @example
     * // Delete one DepositOrder
     * const DepositOrder = await prisma.depositOrder.delete({
     *   where: {
     *     // ... filter to delete one DepositOrder
     *   }
     * })
     * 
     */
    delete<T extends DepositOrderDeleteArgs>(args: SelectSubset<T, DepositOrderDeleteArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepositOrder.
     * @param {DepositOrderUpdateArgs} args - Arguments to update one DepositOrder.
     * @example
     * // Update one DepositOrder
     * const depositOrder = await prisma.depositOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepositOrderUpdateArgs>(args: SelectSubset<T, DepositOrderUpdateArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepositOrders.
     * @param {DepositOrderDeleteManyArgs} args - Arguments to filter DepositOrders to delete.
     * @example
     * // Delete a few DepositOrders
     * const { count } = await prisma.depositOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepositOrderDeleteManyArgs>(args?: SelectSubset<T, DepositOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepositOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepositOrders
     * const depositOrder = await prisma.depositOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepositOrderUpdateManyArgs>(args: SelectSubset<T, DepositOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepositOrders and returns the data updated in the database.
     * @param {DepositOrderUpdateManyAndReturnArgs} args - Arguments to update many DepositOrders.
     * @example
     * // Update many DepositOrders
     * const depositOrder = await prisma.depositOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepositOrders and only return the `id`
     * const depositOrderWithIdOnly = await prisma.depositOrder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepositOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, DepositOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepositOrder.
     * @param {DepositOrderUpsertArgs} args - Arguments to update or create a DepositOrder.
     * @example
     * // Update or create a DepositOrder
     * const depositOrder = await prisma.depositOrder.upsert({
     *   create: {
     *     // ... data to create a DepositOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepositOrder we want to update
     *   }
     * })
     */
    upsert<T extends DepositOrderUpsertArgs>(args: SelectSubset<T, DepositOrderUpsertArgs<ExtArgs>>): Prisma__DepositOrderClient<$Result.GetResult<Prisma.$DepositOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepositOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderCountArgs} args - Arguments to filter DepositOrders to count.
     * @example
     * // Count the number of DepositOrders
     * const count = await prisma.depositOrder.count({
     *   where: {
     *     // ... the filter for the DepositOrders we want to count
     *   }
     * })
    **/
    count<T extends DepositOrderCountArgs>(
      args?: Subset<T, DepositOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepositOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepositOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepositOrderAggregateArgs>(args: Subset<T, DepositOrderAggregateArgs>): Prisma.PrismaPromise<GetDepositOrderAggregateType<T>>

    /**
     * Group by DepositOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepositOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepositOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepositOrderGroupByArgs['orderBy'] }
        : { orderBy?: DepositOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepositOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepositOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepositOrder model
   */
  readonly fields: DepositOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepositOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepositOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    plan<T extends DepositOrder$planArgs<ExtArgs> = {}>(args?: Subset<T, DepositOrder$planArgs<ExtArgs>>): Prisma__DepositPlanClient<$Result.GetResult<Prisma.$DepositPlanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepositOrder model
   */
  interface DepositOrderFieldRefs {
    readonly id: FieldRef<"DepositOrder", 'String'>
    readonly shopDomain: FieldRef<"DepositOrder", 'String'>
    readonly orderId: FieldRef<"DepositOrder", 'String'>
    readonly orderGid: FieldRef<"DepositOrder", 'String'>
    readonly orderNumber: FieldRef<"DepositOrder", 'String'>
    readonly customerId: FieldRef<"DepositOrder", 'String'>
    readonly customerEmail: FieldRef<"DepositOrder", 'String'>
    readonly customerName: FieldRef<"DepositOrder", 'String'>
    readonly customerPhone: FieldRef<"DepositOrder", 'String'>
    readonly tourName: FieldRef<"DepositOrder", 'String'>
    readonly travelers: FieldRef<"DepositOrder", 'Int'>
    readonly arrivalDate: FieldRef<"DepositOrder", 'DateTime'>
    readonly pickupAddress: FieldRef<"DepositOrder", 'String'>
    readonly campCategory: FieldRef<"DepositOrder", 'String'>
    readonly depositAmount: FieldRef<"DepositOrder", 'Float'>
    readonly balanceAmount: FieldRef<"DepositOrder", 'Float'>
    readonly totalAmount: FieldRef<"DepositOrder", 'Float'>
    readonly depositPaid: FieldRef<"DepositOrder", 'Boolean'>
    readonly balancePaid: FieldRef<"DepositOrder", 'Boolean'>
    readonly balanceDueDate: FieldRef<"DepositOrder", 'DateTime'>
    readonly sellingPlanId: FieldRef<"DepositOrder", 'String'>
    readonly createdAt: FieldRef<"DepositOrder", 'DateTime'>
    readonly updatedAt: FieldRef<"DepositOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DepositOrder findUnique
   */
  export type DepositOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter, which DepositOrder to fetch.
     */
    where: DepositOrderWhereUniqueInput
  }

  /**
   * DepositOrder findUniqueOrThrow
   */
  export type DepositOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter, which DepositOrder to fetch.
     */
    where: DepositOrderWhereUniqueInput
  }

  /**
   * DepositOrder findFirst
   */
  export type DepositOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter, which DepositOrder to fetch.
     */
    where?: DepositOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositOrders to fetch.
     */
    orderBy?: DepositOrderOrderByWithRelationInput | DepositOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositOrders.
     */
    cursor?: DepositOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositOrders.
     */
    distinct?: DepositOrderScalarFieldEnum | DepositOrderScalarFieldEnum[]
  }

  /**
   * DepositOrder findFirstOrThrow
   */
  export type DepositOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter, which DepositOrder to fetch.
     */
    where?: DepositOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositOrders to fetch.
     */
    orderBy?: DepositOrderOrderByWithRelationInput | DepositOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepositOrders.
     */
    cursor?: DepositOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepositOrders.
     */
    distinct?: DepositOrderScalarFieldEnum | DepositOrderScalarFieldEnum[]
  }

  /**
   * DepositOrder findMany
   */
  export type DepositOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter, which DepositOrders to fetch.
     */
    where?: DepositOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepositOrders to fetch.
     */
    orderBy?: DepositOrderOrderByWithRelationInput | DepositOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepositOrders.
     */
    cursor?: DepositOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepositOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepositOrders.
     */
    skip?: number
    distinct?: DepositOrderScalarFieldEnum | DepositOrderScalarFieldEnum[]
  }

  /**
   * DepositOrder create
   */
  export type DepositOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a DepositOrder.
     */
    data: XOR<DepositOrderCreateInput, DepositOrderUncheckedCreateInput>
  }

  /**
   * DepositOrder createMany
   */
  export type DepositOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepositOrders.
     */
    data: DepositOrderCreateManyInput | DepositOrderCreateManyInput[]
  }

  /**
   * DepositOrder createManyAndReturn
   */
  export type DepositOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * The data used to create many DepositOrders.
     */
    data: DepositOrderCreateManyInput | DepositOrderCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepositOrder update
   */
  export type DepositOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a DepositOrder.
     */
    data: XOR<DepositOrderUpdateInput, DepositOrderUncheckedUpdateInput>
    /**
     * Choose, which DepositOrder to update.
     */
    where: DepositOrderWhereUniqueInput
  }

  /**
   * DepositOrder updateMany
   */
  export type DepositOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepositOrders.
     */
    data: XOR<DepositOrderUpdateManyMutationInput, DepositOrderUncheckedUpdateManyInput>
    /**
     * Filter which DepositOrders to update
     */
    where?: DepositOrderWhereInput
    /**
     * Limit how many DepositOrders to update.
     */
    limit?: number
  }

  /**
   * DepositOrder updateManyAndReturn
   */
  export type DepositOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * The data used to update DepositOrders.
     */
    data: XOR<DepositOrderUpdateManyMutationInput, DepositOrderUncheckedUpdateManyInput>
    /**
     * Filter which DepositOrders to update
     */
    where?: DepositOrderWhereInput
    /**
     * Limit how many DepositOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepositOrder upsert
   */
  export type DepositOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the DepositOrder to update in case it exists.
     */
    where: DepositOrderWhereUniqueInput
    /**
     * In case the DepositOrder found by the `where` argument doesn't exist, create a new DepositOrder with this data.
     */
    create: XOR<DepositOrderCreateInput, DepositOrderUncheckedCreateInput>
    /**
     * In case the DepositOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepositOrderUpdateInput, DepositOrderUncheckedUpdateInput>
  }

  /**
   * DepositOrder delete
   */
  export type DepositOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
    /**
     * Filter which DepositOrder to delete.
     */
    where: DepositOrderWhereUniqueInput
  }

  /**
   * DepositOrder deleteMany
   */
  export type DepositOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepositOrders to delete
     */
    where?: DepositOrderWhereInput
    /**
     * Limit how many DepositOrders to delete.
     */
    limit?: number
  }

  /**
   * DepositOrder.plan
   */
  export type DepositOrder$planArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositPlan
     */
    select?: DepositPlanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositPlan
     */
    omit?: DepositPlanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositPlanInclude<ExtArgs> | null
    where?: DepositPlanWhereInput
  }

  /**
   * DepositOrder without action
   */
  export type DepositOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepositOrder
     */
    select?: DepositOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepositOrder
     */
    omit?: DepositOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepositOrderInclude<ExtArgs> | null
  }


  /**
   * Model AppConfiguration
   */

  export type AggregateAppConfiguration = {
    _count: AppConfigurationCountAggregateOutputType | null
    _avg: AppConfigurationAvgAggregateOutputType | null
    _sum: AppConfigurationSumAggregateOutputType | null
    _min: AppConfigurationMinAggregateOutputType | null
    _max: AppConfigurationMaxAggregateOutputType | null
  }

  export type AppConfigurationAvgAggregateOutputType = {
    defaultDepositPercent: number | null
    defaultBalanceDays: number | null
  }

  export type AppConfigurationSumAggregateOutputType = {
    defaultDepositPercent: number | null
    defaultBalanceDays: number | null
  }

  export type AppConfigurationMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    defaultDepositPercent: number | null
    defaultBalanceDays: number | null
    emailNotifications: boolean | null
    autoApplyToProducts: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppConfigurationMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    defaultDepositPercent: number | null
    defaultBalanceDays: number | null
    emailNotifications: boolean | null
    autoApplyToProducts: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppConfigurationCountAggregateOutputType = {
    id: number
    shopDomain: number
    defaultDepositPercent: number
    defaultBalanceDays: number
    emailNotifications: number
    autoApplyToProducts: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppConfigurationAvgAggregateInputType = {
    defaultDepositPercent?: true
    defaultBalanceDays?: true
  }

  export type AppConfigurationSumAggregateInputType = {
    defaultDepositPercent?: true
    defaultBalanceDays?: true
  }

  export type AppConfigurationMinAggregateInputType = {
    id?: true
    shopDomain?: true
    defaultDepositPercent?: true
    defaultBalanceDays?: true
    emailNotifications?: true
    autoApplyToProducts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppConfigurationMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    defaultDepositPercent?: true
    defaultBalanceDays?: true
    emailNotifications?: true
    autoApplyToProducts?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppConfigurationCountAggregateInputType = {
    id?: true
    shopDomain?: true
    defaultDepositPercent?: true
    defaultBalanceDays?: true
    emailNotifications?: true
    autoApplyToProducts?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppConfiguration to aggregate.
     */
    where?: AppConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppConfigurations to fetch.
     */
    orderBy?: AppConfigurationOrderByWithRelationInput | AppConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppConfigurations
    **/
    _count?: true | AppConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppConfigurationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppConfigurationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppConfigurationMaxAggregateInputType
  }

  export type GetAppConfigurationAggregateType<T extends AppConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregateAppConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppConfiguration[P]>
      : GetScalarType<T[P], AggregateAppConfiguration[P]>
  }




  export type AppConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppConfigurationWhereInput
    orderBy?: AppConfigurationOrderByWithAggregationInput | AppConfigurationOrderByWithAggregationInput[]
    by: AppConfigurationScalarFieldEnum[] | AppConfigurationScalarFieldEnum
    having?: AppConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppConfigurationCountAggregateInputType | true
    _avg?: AppConfigurationAvgAggregateInputType
    _sum?: AppConfigurationSumAggregateInputType
    _min?: AppConfigurationMinAggregateInputType
    _max?: AppConfigurationMaxAggregateInputType
  }

  export type AppConfigurationGroupByOutputType = {
    id: string
    shopDomain: string
    defaultDepositPercent: number
    defaultBalanceDays: number
    emailNotifications: boolean
    autoApplyToProducts: boolean
    createdAt: Date
    updatedAt: Date
    _count: AppConfigurationCountAggregateOutputType | null
    _avg: AppConfigurationAvgAggregateOutputType | null
    _sum: AppConfigurationSumAggregateOutputType | null
    _min: AppConfigurationMinAggregateOutputType | null
    _max: AppConfigurationMaxAggregateOutputType | null
  }

  type GetAppConfigurationGroupByPayload<T extends AppConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], AppConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type AppConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    defaultDepositPercent?: boolean
    defaultBalanceDays?: boolean
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appConfiguration"]>

  export type AppConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    defaultDepositPercent?: boolean
    defaultBalanceDays?: boolean
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appConfiguration"]>

  export type AppConfigurationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    defaultDepositPercent?: boolean
    defaultBalanceDays?: boolean
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["appConfiguration"]>

  export type AppConfigurationSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    defaultDepositPercent?: boolean
    defaultBalanceDays?: boolean
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppConfigurationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shopDomain" | "defaultDepositPercent" | "defaultBalanceDays" | "emailNotifications" | "autoApplyToProducts" | "createdAt" | "updatedAt", ExtArgs["result"]["appConfiguration"]>

  export type $AppConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AppConfiguration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      defaultDepositPercent: number
      defaultBalanceDays: number
      emailNotifications: boolean
      autoApplyToProducts: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appConfiguration"]>
    composites: {}
  }

  type AppConfigurationGetPayload<S extends boolean | null | undefined | AppConfigurationDefaultArgs> = $Result.GetResult<Prisma.$AppConfigurationPayload, S>

  type AppConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppConfigurationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppConfigurationCountAggregateInputType | true
    }

  export interface AppConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppConfiguration'], meta: { name: 'AppConfiguration' } }
    /**
     * Find zero or one AppConfiguration that matches the filter.
     * @param {AppConfigurationFindUniqueArgs} args - Arguments to find a AppConfiguration
     * @example
     * // Get one AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppConfigurationFindUniqueArgs>(args: SelectSubset<T, AppConfigurationFindUniqueArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AppConfiguration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppConfigurationFindUniqueOrThrowArgs} args - Arguments to find a AppConfiguration
     * @example
     * // Get one AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, AppConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationFindFirstArgs} args - Arguments to find a AppConfiguration
     * @example
     * // Get one AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppConfigurationFindFirstArgs>(args?: SelectSubset<T, AppConfigurationFindFirstArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AppConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationFindFirstOrThrowArgs} args - Arguments to find a AppConfiguration
     * @example
     * // Get one AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, AppConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AppConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppConfigurations
     * const appConfigurations = await prisma.appConfiguration.findMany()
     * 
     * // Get first 10 AppConfigurations
     * const appConfigurations = await prisma.appConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appConfigurationWithIdOnly = await prisma.appConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppConfigurationFindManyArgs>(args?: SelectSubset<T, AppConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AppConfiguration.
     * @param {AppConfigurationCreateArgs} args - Arguments to create a AppConfiguration.
     * @example
     * // Create one AppConfiguration
     * const AppConfiguration = await prisma.appConfiguration.create({
     *   data: {
     *     // ... data to create a AppConfiguration
     *   }
     * })
     * 
     */
    create<T extends AppConfigurationCreateArgs>(args: SelectSubset<T, AppConfigurationCreateArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AppConfigurations.
     * @param {AppConfigurationCreateManyArgs} args - Arguments to create many AppConfigurations.
     * @example
     * // Create many AppConfigurations
     * const appConfiguration = await prisma.appConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppConfigurationCreateManyArgs>(args?: SelectSubset<T, AppConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AppConfigurations and returns the data saved in the database.
     * @param {AppConfigurationCreateManyAndReturnArgs} args - Arguments to create many AppConfigurations.
     * @example
     * // Create many AppConfigurations
     * const appConfiguration = await prisma.appConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AppConfigurations and only return the `id`
     * const appConfigurationWithIdOnly = await prisma.appConfiguration.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, AppConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AppConfiguration.
     * @param {AppConfigurationDeleteArgs} args - Arguments to delete one AppConfiguration.
     * @example
     * // Delete one AppConfiguration
     * const AppConfiguration = await prisma.appConfiguration.delete({
     *   where: {
     *     // ... filter to delete one AppConfiguration
     *   }
     * })
     * 
     */
    delete<T extends AppConfigurationDeleteArgs>(args: SelectSubset<T, AppConfigurationDeleteArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AppConfiguration.
     * @param {AppConfigurationUpdateArgs} args - Arguments to update one AppConfiguration.
     * @example
     * // Update one AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppConfigurationUpdateArgs>(args: SelectSubset<T, AppConfigurationUpdateArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AppConfigurations.
     * @param {AppConfigurationDeleteManyArgs} args - Arguments to filter AppConfigurations to delete.
     * @example
     * // Delete a few AppConfigurations
     * const { count } = await prisma.appConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppConfigurationDeleteManyArgs>(args?: SelectSubset<T, AppConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppConfigurations
     * const appConfiguration = await prisma.appConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppConfigurationUpdateManyArgs>(args: SelectSubset<T, AppConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppConfigurations and returns the data updated in the database.
     * @param {AppConfigurationUpdateManyAndReturnArgs} args - Arguments to update many AppConfigurations.
     * @example
     * // Update many AppConfigurations
     * const appConfiguration = await prisma.appConfiguration.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AppConfigurations and only return the `id`
     * const appConfigurationWithIdOnly = await prisma.appConfiguration.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppConfigurationUpdateManyAndReturnArgs>(args: SelectSubset<T, AppConfigurationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AppConfiguration.
     * @param {AppConfigurationUpsertArgs} args - Arguments to update or create a AppConfiguration.
     * @example
     * // Update or create a AppConfiguration
     * const appConfiguration = await prisma.appConfiguration.upsert({
     *   create: {
     *     // ... data to create a AppConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends AppConfigurationUpsertArgs>(args: SelectSubset<T, AppConfigurationUpsertArgs<ExtArgs>>): Prisma__AppConfigurationClient<$Result.GetResult<Prisma.$AppConfigurationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AppConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationCountArgs} args - Arguments to filter AppConfigurations to count.
     * @example
     * // Count the number of AppConfigurations
     * const count = await prisma.appConfiguration.count({
     *   where: {
     *     // ... the filter for the AppConfigurations we want to count
     *   }
     * })
    **/
    count<T extends AppConfigurationCountArgs>(
      args?: Subset<T, AppConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppConfigurationAggregateArgs>(args: Subset<T, AppConfigurationAggregateArgs>): Prisma.PrismaPromise<GetAppConfigurationAggregateType<T>>

    /**
     * Group by AppConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: AppConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AppConfiguration model
   */
  readonly fields: AppConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AppConfiguration model
   */
  interface AppConfigurationFieldRefs {
    readonly id: FieldRef<"AppConfiguration", 'String'>
    readonly shopDomain: FieldRef<"AppConfiguration", 'String'>
    readonly defaultDepositPercent: FieldRef<"AppConfiguration", 'Float'>
    readonly defaultBalanceDays: FieldRef<"AppConfiguration", 'Int'>
    readonly emailNotifications: FieldRef<"AppConfiguration", 'Boolean'>
    readonly autoApplyToProducts: FieldRef<"AppConfiguration", 'Boolean'>
    readonly createdAt: FieldRef<"AppConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"AppConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AppConfiguration findUnique
   */
  export type AppConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter, which AppConfiguration to fetch.
     */
    where: AppConfigurationWhereUniqueInput
  }

  /**
   * AppConfiguration findUniqueOrThrow
   */
  export type AppConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter, which AppConfiguration to fetch.
     */
    where: AppConfigurationWhereUniqueInput
  }

  /**
   * AppConfiguration findFirst
   */
  export type AppConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter, which AppConfiguration to fetch.
     */
    where?: AppConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppConfigurations to fetch.
     */
    orderBy?: AppConfigurationOrderByWithRelationInput | AppConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppConfigurations.
     */
    cursor?: AppConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppConfigurations.
     */
    distinct?: AppConfigurationScalarFieldEnum | AppConfigurationScalarFieldEnum[]
  }

  /**
   * AppConfiguration findFirstOrThrow
   */
  export type AppConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter, which AppConfiguration to fetch.
     */
    where?: AppConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppConfigurations to fetch.
     */
    orderBy?: AppConfigurationOrderByWithRelationInput | AppConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppConfigurations.
     */
    cursor?: AppConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppConfigurations.
     */
    distinct?: AppConfigurationScalarFieldEnum | AppConfigurationScalarFieldEnum[]
  }

  /**
   * AppConfiguration findMany
   */
  export type AppConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter, which AppConfigurations to fetch.
     */
    where?: AppConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppConfigurations to fetch.
     */
    orderBy?: AppConfigurationOrderByWithRelationInput | AppConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppConfigurations.
     */
    cursor?: AppConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppConfigurations.
     */
    skip?: number
    distinct?: AppConfigurationScalarFieldEnum | AppConfigurationScalarFieldEnum[]
  }

  /**
   * AppConfiguration create
   */
  export type AppConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * The data needed to create a AppConfiguration.
     */
    data: XOR<AppConfigurationCreateInput, AppConfigurationUncheckedCreateInput>
  }

  /**
   * AppConfiguration createMany
   */
  export type AppConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppConfigurations.
     */
    data: AppConfigurationCreateManyInput | AppConfigurationCreateManyInput[]
  }

  /**
   * AppConfiguration createManyAndReturn
   */
  export type AppConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * The data used to create many AppConfigurations.
     */
    data: AppConfigurationCreateManyInput | AppConfigurationCreateManyInput[]
  }

  /**
   * AppConfiguration update
   */
  export type AppConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * The data needed to update a AppConfiguration.
     */
    data: XOR<AppConfigurationUpdateInput, AppConfigurationUncheckedUpdateInput>
    /**
     * Choose, which AppConfiguration to update.
     */
    where: AppConfigurationWhereUniqueInput
  }

  /**
   * AppConfiguration updateMany
   */
  export type AppConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppConfigurations.
     */
    data: XOR<AppConfigurationUpdateManyMutationInput, AppConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which AppConfigurations to update
     */
    where?: AppConfigurationWhereInput
    /**
     * Limit how many AppConfigurations to update.
     */
    limit?: number
  }

  /**
   * AppConfiguration updateManyAndReturn
   */
  export type AppConfigurationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * The data used to update AppConfigurations.
     */
    data: XOR<AppConfigurationUpdateManyMutationInput, AppConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which AppConfigurations to update
     */
    where?: AppConfigurationWhereInput
    /**
     * Limit how many AppConfigurations to update.
     */
    limit?: number
  }

  /**
   * AppConfiguration upsert
   */
  export type AppConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * The filter to search for the AppConfiguration to update in case it exists.
     */
    where: AppConfigurationWhereUniqueInput
    /**
     * In case the AppConfiguration found by the `where` argument doesn't exist, create a new AppConfiguration with this data.
     */
    create: XOR<AppConfigurationCreateInput, AppConfigurationUncheckedCreateInput>
    /**
     * In case the AppConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppConfigurationUpdateInput, AppConfigurationUncheckedUpdateInput>
  }

  /**
   * AppConfiguration delete
   */
  export type AppConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
    /**
     * Filter which AppConfiguration to delete.
     */
    where: AppConfigurationWhereUniqueInput
  }

  /**
   * AppConfiguration deleteMany
   */
  export type AppConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppConfigurations to delete
     */
    where?: AppConfigurationWhereInput
    /**
     * Limit how many AppConfigurations to delete.
     */
    limit?: number
  }

  /**
   * AppConfiguration without action
   */
  export type AppConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppConfiguration
     */
    select?: AppConfigurationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AppConfiguration
     */
    omit?: AppConfigurationOmit<ExtArgs> | null
  }


  /**
   * Model SellingPlanConfig
   */

  export type AggregateSellingPlanConfig = {
    _count: SellingPlanConfigCountAggregateOutputType | null
    _avg: SellingPlanConfigAvgAggregateOutputType | null
    _sum: SellingPlanConfigSumAggregateOutputType | null
    _min: SellingPlanConfigMinAggregateOutputType | null
    _max: SellingPlanConfigMaxAggregateOutputType | null
  }

  export type SellingPlanConfigAvgAggregateOutputType = {
    productsCount: number | null
  }

  export type SellingPlanConfigSumAggregateOutputType = {
    productsCount: number | null
  }

  export type SellingPlanConfigMinAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    sellingPlanGroupId: string | null
    sellingPlanId: string | null
    assignmentMode: string | null
    selectedProductIds: string | null
    selectedCollectionIds: string | null
    productsCount: number | null
    lastSyncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellingPlanConfigMaxAggregateOutputType = {
    id: string | null
    shopDomain: string | null
    sellingPlanGroupId: string | null
    sellingPlanId: string | null
    assignmentMode: string | null
    selectedProductIds: string | null
    selectedCollectionIds: string | null
    productsCount: number | null
    lastSyncedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SellingPlanConfigCountAggregateOutputType = {
    id: number
    shopDomain: number
    sellingPlanGroupId: number
    sellingPlanId: number
    assignmentMode: number
    selectedProductIds: number
    selectedCollectionIds: number
    productsCount: number
    lastSyncedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SellingPlanConfigAvgAggregateInputType = {
    productsCount?: true
  }

  export type SellingPlanConfigSumAggregateInputType = {
    productsCount?: true
  }

  export type SellingPlanConfigMinAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanGroupId?: true
    sellingPlanId?: true
    assignmentMode?: true
    selectedProductIds?: true
    selectedCollectionIds?: true
    productsCount?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellingPlanConfigMaxAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanGroupId?: true
    sellingPlanId?: true
    assignmentMode?: true
    selectedProductIds?: true
    selectedCollectionIds?: true
    productsCount?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SellingPlanConfigCountAggregateInputType = {
    id?: true
    shopDomain?: true
    sellingPlanGroupId?: true
    sellingPlanId?: true
    assignmentMode?: true
    selectedProductIds?: true
    selectedCollectionIds?: true
    productsCount?: true
    lastSyncedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SellingPlanConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellingPlanConfig to aggregate.
     */
    where?: SellingPlanConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellingPlanConfigs to fetch.
     */
    orderBy?: SellingPlanConfigOrderByWithRelationInput | SellingPlanConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellingPlanConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellingPlanConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellingPlanConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SellingPlanConfigs
    **/
    _count?: true | SellingPlanConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellingPlanConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellingPlanConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellingPlanConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellingPlanConfigMaxAggregateInputType
  }

  export type GetSellingPlanConfigAggregateType<T extends SellingPlanConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSellingPlanConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSellingPlanConfig[P]>
      : GetScalarType<T[P], AggregateSellingPlanConfig[P]>
  }




  export type SellingPlanConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellingPlanConfigWhereInput
    orderBy?: SellingPlanConfigOrderByWithAggregationInput | SellingPlanConfigOrderByWithAggregationInput[]
    by: SellingPlanConfigScalarFieldEnum[] | SellingPlanConfigScalarFieldEnum
    having?: SellingPlanConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellingPlanConfigCountAggregateInputType | true
    _avg?: SellingPlanConfigAvgAggregateInputType
    _sum?: SellingPlanConfigSumAggregateInputType
    _min?: SellingPlanConfigMinAggregateInputType
    _max?: SellingPlanConfigMaxAggregateInputType
  }

  export type SellingPlanConfigGroupByOutputType = {
    id: string
    shopDomain: string
    sellingPlanGroupId: string
    sellingPlanId: string
    assignmentMode: string
    selectedProductIds: string | null
    selectedCollectionIds: string | null
    productsCount: number
    lastSyncedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: SellingPlanConfigCountAggregateOutputType | null
    _avg: SellingPlanConfigAvgAggregateOutputType | null
    _sum: SellingPlanConfigSumAggregateOutputType | null
    _min: SellingPlanConfigMinAggregateOutputType | null
    _max: SellingPlanConfigMaxAggregateOutputType | null
  }

  type GetSellingPlanConfigGroupByPayload<T extends SellingPlanConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellingPlanConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellingPlanConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellingPlanConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SellingPlanConfigGroupByOutputType[P]>
        }
      >
    >


  export type SellingPlanConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanGroupId?: boolean
    sellingPlanId?: boolean
    assignmentMode?: boolean
    selectedProductIds?: boolean
    selectedCollectionIds?: boolean
    productsCount?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sellingPlanConfig"]>

  export type SellingPlanConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanGroupId?: boolean
    sellingPlanId?: boolean
    assignmentMode?: boolean
    selectedProductIds?: boolean
    selectedCollectionIds?: boolean
    productsCount?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sellingPlanConfig"]>

  export type SellingPlanConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopDomain?: boolean
    sellingPlanGroupId?: boolean
    sellingPlanId?: boolean
    assignmentMode?: boolean
    selectedProductIds?: boolean
    selectedCollectionIds?: boolean
    productsCount?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["sellingPlanConfig"]>

  export type SellingPlanConfigSelectScalar = {
    id?: boolean
    shopDomain?: boolean
    sellingPlanGroupId?: boolean
    sellingPlanId?: boolean
    assignmentMode?: boolean
    selectedProductIds?: boolean
    selectedCollectionIds?: boolean
    productsCount?: boolean
    lastSyncedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SellingPlanConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "shopDomain" | "sellingPlanGroupId" | "sellingPlanId" | "assignmentMode" | "selectedProductIds" | "selectedCollectionIds" | "productsCount" | "lastSyncedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["sellingPlanConfig"]>

  export type $SellingPlanConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SellingPlanConfig"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopDomain: string
      sellingPlanGroupId: string
      sellingPlanId: string
      assignmentMode: string
      selectedProductIds: string | null
      selectedCollectionIds: string | null
      productsCount: number
      lastSyncedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sellingPlanConfig"]>
    composites: {}
  }

  type SellingPlanConfigGetPayload<S extends boolean | null | undefined | SellingPlanConfigDefaultArgs> = $Result.GetResult<Prisma.$SellingPlanConfigPayload, S>

  type SellingPlanConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SellingPlanConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SellingPlanConfigCountAggregateInputType | true
    }

  export interface SellingPlanConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SellingPlanConfig'], meta: { name: 'SellingPlanConfig' } }
    /**
     * Find zero or one SellingPlanConfig that matches the filter.
     * @param {SellingPlanConfigFindUniqueArgs} args - Arguments to find a SellingPlanConfig
     * @example
     * // Get one SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SellingPlanConfigFindUniqueArgs>(args: SelectSubset<T, SellingPlanConfigFindUniqueArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SellingPlanConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SellingPlanConfigFindUniqueOrThrowArgs} args - Arguments to find a SellingPlanConfig
     * @example
     * // Get one SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SellingPlanConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SellingPlanConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellingPlanConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigFindFirstArgs} args - Arguments to find a SellingPlanConfig
     * @example
     * // Get one SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SellingPlanConfigFindFirstArgs>(args?: SelectSubset<T, SellingPlanConfigFindFirstArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellingPlanConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigFindFirstOrThrowArgs} args - Arguments to find a SellingPlanConfig
     * @example
     * // Get one SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SellingPlanConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SellingPlanConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SellingPlanConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SellingPlanConfigs
     * const sellingPlanConfigs = await prisma.sellingPlanConfig.findMany()
     * 
     * // Get first 10 SellingPlanConfigs
     * const sellingPlanConfigs = await prisma.sellingPlanConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sellingPlanConfigWithIdOnly = await prisma.sellingPlanConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SellingPlanConfigFindManyArgs>(args?: SelectSubset<T, SellingPlanConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SellingPlanConfig.
     * @param {SellingPlanConfigCreateArgs} args - Arguments to create a SellingPlanConfig.
     * @example
     * // Create one SellingPlanConfig
     * const SellingPlanConfig = await prisma.sellingPlanConfig.create({
     *   data: {
     *     // ... data to create a SellingPlanConfig
     *   }
     * })
     * 
     */
    create<T extends SellingPlanConfigCreateArgs>(args: SelectSubset<T, SellingPlanConfigCreateArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SellingPlanConfigs.
     * @param {SellingPlanConfigCreateManyArgs} args - Arguments to create many SellingPlanConfigs.
     * @example
     * // Create many SellingPlanConfigs
     * const sellingPlanConfig = await prisma.sellingPlanConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SellingPlanConfigCreateManyArgs>(args?: SelectSubset<T, SellingPlanConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SellingPlanConfigs and returns the data saved in the database.
     * @param {SellingPlanConfigCreateManyAndReturnArgs} args - Arguments to create many SellingPlanConfigs.
     * @example
     * // Create many SellingPlanConfigs
     * const sellingPlanConfig = await prisma.sellingPlanConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SellingPlanConfigs and only return the `id`
     * const sellingPlanConfigWithIdOnly = await prisma.sellingPlanConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SellingPlanConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, SellingPlanConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SellingPlanConfig.
     * @param {SellingPlanConfigDeleteArgs} args - Arguments to delete one SellingPlanConfig.
     * @example
     * // Delete one SellingPlanConfig
     * const SellingPlanConfig = await prisma.sellingPlanConfig.delete({
     *   where: {
     *     // ... filter to delete one SellingPlanConfig
     *   }
     * })
     * 
     */
    delete<T extends SellingPlanConfigDeleteArgs>(args: SelectSubset<T, SellingPlanConfigDeleteArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SellingPlanConfig.
     * @param {SellingPlanConfigUpdateArgs} args - Arguments to update one SellingPlanConfig.
     * @example
     * // Update one SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SellingPlanConfigUpdateArgs>(args: SelectSubset<T, SellingPlanConfigUpdateArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SellingPlanConfigs.
     * @param {SellingPlanConfigDeleteManyArgs} args - Arguments to filter SellingPlanConfigs to delete.
     * @example
     * // Delete a few SellingPlanConfigs
     * const { count } = await prisma.sellingPlanConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SellingPlanConfigDeleteManyArgs>(args?: SelectSubset<T, SellingPlanConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellingPlanConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SellingPlanConfigs
     * const sellingPlanConfig = await prisma.sellingPlanConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SellingPlanConfigUpdateManyArgs>(args: SelectSubset<T, SellingPlanConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellingPlanConfigs and returns the data updated in the database.
     * @param {SellingPlanConfigUpdateManyAndReturnArgs} args - Arguments to update many SellingPlanConfigs.
     * @example
     * // Update many SellingPlanConfigs
     * const sellingPlanConfig = await prisma.sellingPlanConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SellingPlanConfigs and only return the `id`
     * const sellingPlanConfigWithIdOnly = await prisma.sellingPlanConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SellingPlanConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, SellingPlanConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SellingPlanConfig.
     * @param {SellingPlanConfigUpsertArgs} args - Arguments to update or create a SellingPlanConfig.
     * @example
     * // Update or create a SellingPlanConfig
     * const sellingPlanConfig = await prisma.sellingPlanConfig.upsert({
     *   create: {
     *     // ... data to create a SellingPlanConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SellingPlanConfig we want to update
     *   }
     * })
     */
    upsert<T extends SellingPlanConfigUpsertArgs>(args: SelectSubset<T, SellingPlanConfigUpsertArgs<ExtArgs>>): Prisma__SellingPlanConfigClient<$Result.GetResult<Prisma.$SellingPlanConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SellingPlanConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigCountArgs} args - Arguments to filter SellingPlanConfigs to count.
     * @example
     * // Count the number of SellingPlanConfigs
     * const count = await prisma.sellingPlanConfig.count({
     *   where: {
     *     // ... the filter for the SellingPlanConfigs we want to count
     *   }
     * })
    **/
    count<T extends SellingPlanConfigCountArgs>(
      args?: Subset<T, SellingPlanConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellingPlanConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SellingPlanConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellingPlanConfigAggregateArgs>(args: Subset<T, SellingPlanConfigAggregateArgs>): Prisma.PrismaPromise<GetSellingPlanConfigAggregateType<T>>

    /**
     * Group by SellingPlanConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellingPlanConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellingPlanConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellingPlanConfigGroupByArgs['orderBy'] }
        : { orderBy?: SellingPlanConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellingPlanConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellingPlanConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SellingPlanConfig model
   */
  readonly fields: SellingPlanConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SellingPlanConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellingPlanConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SellingPlanConfig model
   */
  interface SellingPlanConfigFieldRefs {
    readonly id: FieldRef<"SellingPlanConfig", 'String'>
    readonly shopDomain: FieldRef<"SellingPlanConfig", 'String'>
    readonly sellingPlanGroupId: FieldRef<"SellingPlanConfig", 'String'>
    readonly sellingPlanId: FieldRef<"SellingPlanConfig", 'String'>
    readonly assignmentMode: FieldRef<"SellingPlanConfig", 'String'>
    readonly selectedProductIds: FieldRef<"SellingPlanConfig", 'String'>
    readonly selectedCollectionIds: FieldRef<"SellingPlanConfig", 'String'>
    readonly productsCount: FieldRef<"SellingPlanConfig", 'Int'>
    readonly lastSyncedAt: FieldRef<"SellingPlanConfig", 'DateTime'>
    readonly createdAt: FieldRef<"SellingPlanConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"SellingPlanConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SellingPlanConfig findUnique
   */
  export type SellingPlanConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter, which SellingPlanConfig to fetch.
     */
    where: SellingPlanConfigWhereUniqueInput
  }

  /**
   * SellingPlanConfig findUniqueOrThrow
   */
  export type SellingPlanConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter, which SellingPlanConfig to fetch.
     */
    where: SellingPlanConfigWhereUniqueInput
  }

  /**
   * SellingPlanConfig findFirst
   */
  export type SellingPlanConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter, which SellingPlanConfig to fetch.
     */
    where?: SellingPlanConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellingPlanConfigs to fetch.
     */
    orderBy?: SellingPlanConfigOrderByWithRelationInput | SellingPlanConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellingPlanConfigs.
     */
    cursor?: SellingPlanConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellingPlanConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellingPlanConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellingPlanConfigs.
     */
    distinct?: SellingPlanConfigScalarFieldEnum | SellingPlanConfigScalarFieldEnum[]
  }

  /**
   * SellingPlanConfig findFirstOrThrow
   */
  export type SellingPlanConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter, which SellingPlanConfig to fetch.
     */
    where?: SellingPlanConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellingPlanConfigs to fetch.
     */
    orderBy?: SellingPlanConfigOrderByWithRelationInput | SellingPlanConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellingPlanConfigs.
     */
    cursor?: SellingPlanConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellingPlanConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellingPlanConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellingPlanConfigs.
     */
    distinct?: SellingPlanConfigScalarFieldEnum | SellingPlanConfigScalarFieldEnum[]
  }

  /**
   * SellingPlanConfig findMany
   */
  export type SellingPlanConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter, which SellingPlanConfigs to fetch.
     */
    where?: SellingPlanConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellingPlanConfigs to fetch.
     */
    orderBy?: SellingPlanConfigOrderByWithRelationInput | SellingPlanConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SellingPlanConfigs.
     */
    cursor?: SellingPlanConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellingPlanConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellingPlanConfigs.
     */
    skip?: number
    distinct?: SellingPlanConfigScalarFieldEnum | SellingPlanConfigScalarFieldEnum[]
  }

  /**
   * SellingPlanConfig create
   */
  export type SellingPlanConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * The data needed to create a SellingPlanConfig.
     */
    data: XOR<SellingPlanConfigCreateInput, SellingPlanConfigUncheckedCreateInput>
  }

  /**
   * SellingPlanConfig createMany
   */
  export type SellingPlanConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SellingPlanConfigs.
     */
    data: SellingPlanConfigCreateManyInput | SellingPlanConfigCreateManyInput[]
  }

  /**
   * SellingPlanConfig createManyAndReturn
   */
  export type SellingPlanConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * The data used to create many SellingPlanConfigs.
     */
    data: SellingPlanConfigCreateManyInput | SellingPlanConfigCreateManyInput[]
  }

  /**
   * SellingPlanConfig update
   */
  export type SellingPlanConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * The data needed to update a SellingPlanConfig.
     */
    data: XOR<SellingPlanConfigUpdateInput, SellingPlanConfigUncheckedUpdateInput>
    /**
     * Choose, which SellingPlanConfig to update.
     */
    where: SellingPlanConfigWhereUniqueInput
  }

  /**
   * SellingPlanConfig updateMany
   */
  export type SellingPlanConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SellingPlanConfigs.
     */
    data: XOR<SellingPlanConfigUpdateManyMutationInput, SellingPlanConfigUncheckedUpdateManyInput>
    /**
     * Filter which SellingPlanConfigs to update
     */
    where?: SellingPlanConfigWhereInput
    /**
     * Limit how many SellingPlanConfigs to update.
     */
    limit?: number
  }

  /**
   * SellingPlanConfig updateManyAndReturn
   */
  export type SellingPlanConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * The data used to update SellingPlanConfigs.
     */
    data: XOR<SellingPlanConfigUpdateManyMutationInput, SellingPlanConfigUncheckedUpdateManyInput>
    /**
     * Filter which SellingPlanConfigs to update
     */
    where?: SellingPlanConfigWhereInput
    /**
     * Limit how many SellingPlanConfigs to update.
     */
    limit?: number
  }

  /**
   * SellingPlanConfig upsert
   */
  export type SellingPlanConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * The filter to search for the SellingPlanConfig to update in case it exists.
     */
    where: SellingPlanConfigWhereUniqueInput
    /**
     * In case the SellingPlanConfig found by the `where` argument doesn't exist, create a new SellingPlanConfig with this data.
     */
    create: XOR<SellingPlanConfigCreateInput, SellingPlanConfigUncheckedCreateInput>
    /**
     * In case the SellingPlanConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellingPlanConfigUpdateInput, SellingPlanConfigUncheckedUpdateInput>
  }

  /**
   * SellingPlanConfig delete
   */
  export type SellingPlanConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
    /**
     * Filter which SellingPlanConfig to delete.
     */
    where: SellingPlanConfigWhereUniqueInput
  }

  /**
   * SellingPlanConfig deleteMany
   */
  export type SellingPlanConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellingPlanConfigs to delete
     */
    where?: SellingPlanConfigWhereInput
    /**
     * Limit how many SellingPlanConfigs to delete.
     */
    limit?: number
  }

  /**
   * SellingPlanConfig without action
   */
  export type SellingPlanConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellingPlanConfig
     */
    select?: SellingPlanConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellingPlanConfig
     */
    omit?: SellingPlanConfigOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SessionScalarFieldEnum: {
    id: 'id',
    shop: 'shop',
    state: 'state',
    isOnline: 'isOnline',
    scope: 'scope',
    expires: 'expires',
    accessToken: 'accessToken',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    accountOwner: 'accountOwner',
    locale: 'locale',
    collaborator: 'collaborator',
    emailVerified: 'emailVerified'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const DepositPlanScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    sellingPlanId: 'sellingPlanId',
    sellingPlanGid: 'sellingPlanGid',
    groupId: 'groupId',
    planName: 'planName',
    merchantCode: 'merchantCode',
    description: 'description',
    depositPercent: 'depositPercent',
    balanceDueDays: 'balanceDueDays',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepositPlanScalarFieldEnum = (typeof DepositPlanScalarFieldEnum)[keyof typeof DepositPlanScalarFieldEnum]


  export const DepositOrderScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    orderId: 'orderId',
    orderGid: 'orderGid',
    orderNumber: 'orderNumber',
    customerId: 'customerId',
    customerEmail: 'customerEmail',
    customerName: 'customerName',
    customerPhone: 'customerPhone',
    tourName: 'tourName',
    travelers: 'travelers',
    arrivalDate: 'arrivalDate',
    pickupAddress: 'pickupAddress',
    campCategory: 'campCategory',
    depositAmount: 'depositAmount',
    balanceAmount: 'balanceAmount',
    totalAmount: 'totalAmount',
    depositPaid: 'depositPaid',
    balancePaid: 'balancePaid',
    balanceDueDate: 'balanceDueDate',
    sellingPlanId: 'sellingPlanId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepositOrderScalarFieldEnum = (typeof DepositOrderScalarFieldEnum)[keyof typeof DepositOrderScalarFieldEnum]


  export const AppConfigurationScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    defaultDepositPercent: 'defaultDepositPercent',
    defaultBalanceDays: 'defaultBalanceDays',
    emailNotifications: 'emailNotifications',
    autoApplyToProducts: 'autoApplyToProducts',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppConfigurationScalarFieldEnum = (typeof AppConfigurationScalarFieldEnum)[keyof typeof AppConfigurationScalarFieldEnum]


  export const SellingPlanConfigScalarFieldEnum: {
    id: 'id',
    shopDomain: 'shopDomain',
    sellingPlanGroupId: 'sellingPlanGroupId',
    sellingPlanId: 'sellingPlanId',
    assignmentMode: 'assignmentMode',
    selectedProductIds: 'selectedProductIds',
    selectedCollectionIds: 'selectedCollectionIds',
    productsCount: 'productsCount',
    lastSyncedAt: 'lastSyncedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SellingPlanConfigScalarFieldEnum = (typeof SellingPlanConfigScalarFieldEnum)[keyof typeof SellingPlanConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    shop?: StringWithAggregatesFilter<"Session"> | string
    state?: StringWithAggregatesFilter<"Session"> | string
    isOnline?: BoolWithAggregatesFilter<"Session"> | boolean
    scope?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expires?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    accessToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: BigIntNullableWithAggregatesFilter<"Session"> | bigint | number | null
    firstName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    email?: StringNullableWithAggregatesFilter<"Session"> | string | null
    accountOwner?: BoolWithAggregatesFilter<"Session"> | boolean
    locale?: StringNullableWithAggregatesFilter<"Session"> | string | null
    collaborator?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
  }

  export type DepositPlanWhereInput = {
    AND?: DepositPlanWhereInput | DepositPlanWhereInput[]
    OR?: DepositPlanWhereInput[]
    NOT?: DepositPlanWhereInput | DepositPlanWhereInput[]
    id?: StringFilter<"DepositPlan"> | string
    shopDomain?: StringFilter<"DepositPlan"> | string
    sellingPlanId?: StringFilter<"DepositPlan"> | string
    sellingPlanGid?: StringFilter<"DepositPlan"> | string
    groupId?: StringFilter<"DepositPlan"> | string
    planName?: StringFilter<"DepositPlan"> | string
    merchantCode?: StringFilter<"DepositPlan"> | string
    description?: StringNullableFilter<"DepositPlan"> | string | null
    depositPercent?: FloatFilter<"DepositPlan"> | number
    balanceDueDays?: IntFilter<"DepositPlan"> | number
    isActive?: BoolFilter<"DepositPlan"> | boolean
    createdAt?: DateTimeFilter<"DepositPlan"> | Date | string
    updatedAt?: DateTimeFilter<"DepositPlan"> | Date | string
    orders?: DepositOrderListRelationFilter
  }

  export type DepositPlanOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanId?: SortOrder
    sellingPlanGid?: SortOrder
    groupId?: SortOrder
    planName?: SortOrder
    merchantCode?: SortOrder
    description?: SortOrderInput | SortOrder
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    orders?: DepositOrderOrderByRelationAggregateInput
  }

  export type DepositPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sellingPlanId?: string
    shopDomain_sellingPlanId?: DepositPlanShopDomainSellingPlanIdCompoundUniqueInput
    AND?: DepositPlanWhereInput | DepositPlanWhereInput[]
    OR?: DepositPlanWhereInput[]
    NOT?: DepositPlanWhereInput | DepositPlanWhereInput[]
    shopDomain?: StringFilter<"DepositPlan"> | string
    sellingPlanGid?: StringFilter<"DepositPlan"> | string
    groupId?: StringFilter<"DepositPlan"> | string
    planName?: StringFilter<"DepositPlan"> | string
    merchantCode?: StringFilter<"DepositPlan"> | string
    description?: StringNullableFilter<"DepositPlan"> | string | null
    depositPercent?: FloatFilter<"DepositPlan"> | number
    balanceDueDays?: IntFilter<"DepositPlan"> | number
    isActive?: BoolFilter<"DepositPlan"> | boolean
    createdAt?: DateTimeFilter<"DepositPlan"> | Date | string
    updatedAt?: DateTimeFilter<"DepositPlan"> | Date | string
    orders?: DepositOrderListRelationFilter
  }, "id" | "sellingPlanId" | "shopDomain_sellingPlanId">

  export type DepositPlanOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanId?: SortOrder
    sellingPlanGid?: SortOrder
    groupId?: SortOrder
    planName?: SortOrder
    merchantCode?: SortOrder
    description?: SortOrderInput | SortOrder
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepositPlanCountOrderByAggregateInput
    _avg?: DepositPlanAvgOrderByAggregateInput
    _max?: DepositPlanMaxOrderByAggregateInput
    _min?: DepositPlanMinOrderByAggregateInput
    _sum?: DepositPlanSumOrderByAggregateInput
  }

  export type DepositPlanScalarWhereWithAggregatesInput = {
    AND?: DepositPlanScalarWhereWithAggregatesInput | DepositPlanScalarWhereWithAggregatesInput[]
    OR?: DepositPlanScalarWhereWithAggregatesInput[]
    NOT?: DepositPlanScalarWhereWithAggregatesInput | DepositPlanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepositPlan"> | string
    shopDomain?: StringWithAggregatesFilter<"DepositPlan"> | string
    sellingPlanId?: StringWithAggregatesFilter<"DepositPlan"> | string
    sellingPlanGid?: StringWithAggregatesFilter<"DepositPlan"> | string
    groupId?: StringWithAggregatesFilter<"DepositPlan"> | string
    planName?: StringWithAggregatesFilter<"DepositPlan"> | string
    merchantCode?: StringWithAggregatesFilter<"DepositPlan"> | string
    description?: StringNullableWithAggregatesFilter<"DepositPlan"> | string | null
    depositPercent?: FloatWithAggregatesFilter<"DepositPlan"> | number
    balanceDueDays?: IntWithAggregatesFilter<"DepositPlan"> | number
    isActive?: BoolWithAggregatesFilter<"DepositPlan"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DepositPlan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DepositPlan"> | Date | string
  }

  export type DepositOrderWhereInput = {
    AND?: DepositOrderWhereInput | DepositOrderWhereInput[]
    OR?: DepositOrderWhereInput[]
    NOT?: DepositOrderWhereInput | DepositOrderWhereInput[]
    id?: StringFilter<"DepositOrder"> | string
    shopDomain?: StringFilter<"DepositOrder"> | string
    orderId?: StringFilter<"DepositOrder"> | string
    orderGid?: StringFilter<"DepositOrder"> | string
    orderNumber?: StringNullableFilter<"DepositOrder"> | string | null
    customerId?: StringNullableFilter<"DepositOrder"> | string | null
    customerEmail?: StringNullableFilter<"DepositOrder"> | string | null
    customerName?: StringNullableFilter<"DepositOrder"> | string | null
    customerPhone?: StringNullableFilter<"DepositOrder"> | string | null
    tourName?: StringNullableFilter<"DepositOrder"> | string | null
    travelers?: IntNullableFilter<"DepositOrder"> | number | null
    arrivalDate?: DateTimeNullableFilter<"DepositOrder"> | Date | string | null
    pickupAddress?: StringNullableFilter<"DepositOrder"> | string | null
    campCategory?: StringNullableFilter<"DepositOrder"> | string | null
    depositAmount?: FloatFilter<"DepositOrder"> | number
    balanceAmount?: FloatFilter<"DepositOrder"> | number
    totalAmount?: FloatFilter<"DepositOrder"> | number
    depositPaid?: BoolFilter<"DepositOrder"> | boolean
    balancePaid?: BoolFilter<"DepositOrder"> | boolean
    balanceDueDate?: DateTimeFilter<"DepositOrder"> | Date | string
    sellingPlanId?: StringNullableFilter<"DepositOrder"> | string | null
    createdAt?: DateTimeFilter<"DepositOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DepositOrder"> | Date | string
    plan?: XOR<DepositPlanNullableScalarRelationFilter, DepositPlanWhereInput> | null
  }

  export type DepositOrderOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    orderId?: SortOrder
    orderGid?: SortOrder
    orderNumber?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    customerEmail?: SortOrderInput | SortOrder
    customerName?: SortOrderInput | SortOrder
    customerPhone?: SortOrderInput | SortOrder
    tourName?: SortOrderInput | SortOrder
    travelers?: SortOrderInput | SortOrder
    arrivalDate?: SortOrderInput | SortOrder
    pickupAddress?: SortOrderInput | SortOrder
    campCategory?: SortOrderInput | SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
    depositPaid?: SortOrder
    balancePaid?: SortOrder
    balanceDueDate?: SortOrder
    sellingPlanId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    plan?: DepositPlanOrderByWithRelationInput
  }

  export type DepositOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopDomain_orderId?: DepositOrderShopDomainOrderIdCompoundUniqueInput
    AND?: DepositOrderWhereInput | DepositOrderWhereInput[]
    OR?: DepositOrderWhereInput[]
    NOT?: DepositOrderWhereInput | DepositOrderWhereInput[]
    shopDomain?: StringFilter<"DepositOrder"> | string
    orderId?: StringFilter<"DepositOrder"> | string
    orderGid?: StringFilter<"DepositOrder"> | string
    orderNumber?: StringNullableFilter<"DepositOrder"> | string | null
    customerId?: StringNullableFilter<"DepositOrder"> | string | null
    customerEmail?: StringNullableFilter<"DepositOrder"> | string | null
    customerName?: StringNullableFilter<"DepositOrder"> | string | null
    customerPhone?: StringNullableFilter<"DepositOrder"> | string | null
    tourName?: StringNullableFilter<"DepositOrder"> | string | null
    travelers?: IntNullableFilter<"DepositOrder"> | number | null
    arrivalDate?: DateTimeNullableFilter<"DepositOrder"> | Date | string | null
    pickupAddress?: StringNullableFilter<"DepositOrder"> | string | null
    campCategory?: StringNullableFilter<"DepositOrder"> | string | null
    depositAmount?: FloatFilter<"DepositOrder"> | number
    balanceAmount?: FloatFilter<"DepositOrder"> | number
    totalAmount?: FloatFilter<"DepositOrder"> | number
    depositPaid?: BoolFilter<"DepositOrder"> | boolean
    balancePaid?: BoolFilter<"DepositOrder"> | boolean
    balanceDueDate?: DateTimeFilter<"DepositOrder"> | Date | string
    sellingPlanId?: StringNullableFilter<"DepositOrder"> | string | null
    createdAt?: DateTimeFilter<"DepositOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DepositOrder"> | Date | string
    plan?: XOR<DepositPlanNullableScalarRelationFilter, DepositPlanWhereInput> | null
  }, "id" | "shopDomain_orderId">

  export type DepositOrderOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    orderId?: SortOrder
    orderGid?: SortOrder
    orderNumber?: SortOrderInput | SortOrder
    customerId?: SortOrderInput | SortOrder
    customerEmail?: SortOrderInput | SortOrder
    customerName?: SortOrderInput | SortOrder
    customerPhone?: SortOrderInput | SortOrder
    tourName?: SortOrderInput | SortOrder
    travelers?: SortOrderInput | SortOrder
    arrivalDate?: SortOrderInput | SortOrder
    pickupAddress?: SortOrderInput | SortOrder
    campCategory?: SortOrderInput | SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
    depositPaid?: SortOrder
    balancePaid?: SortOrder
    balanceDueDate?: SortOrder
    sellingPlanId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepositOrderCountOrderByAggregateInput
    _avg?: DepositOrderAvgOrderByAggregateInput
    _max?: DepositOrderMaxOrderByAggregateInput
    _min?: DepositOrderMinOrderByAggregateInput
    _sum?: DepositOrderSumOrderByAggregateInput
  }

  export type DepositOrderScalarWhereWithAggregatesInput = {
    AND?: DepositOrderScalarWhereWithAggregatesInput | DepositOrderScalarWhereWithAggregatesInput[]
    OR?: DepositOrderScalarWhereWithAggregatesInput[]
    NOT?: DepositOrderScalarWhereWithAggregatesInput | DepositOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepositOrder"> | string
    shopDomain?: StringWithAggregatesFilter<"DepositOrder"> | string
    orderId?: StringWithAggregatesFilter<"DepositOrder"> | string
    orderGid?: StringWithAggregatesFilter<"DepositOrder"> | string
    orderNumber?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    customerId?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    customerEmail?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    customerName?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    customerPhone?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    tourName?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    travelers?: IntNullableWithAggregatesFilter<"DepositOrder"> | number | null
    arrivalDate?: DateTimeNullableWithAggregatesFilter<"DepositOrder"> | Date | string | null
    pickupAddress?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    campCategory?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    depositAmount?: FloatWithAggregatesFilter<"DepositOrder"> | number
    balanceAmount?: FloatWithAggregatesFilter<"DepositOrder"> | number
    totalAmount?: FloatWithAggregatesFilter<"DepositOrder"> | number
    depositPaid?: BoolWithAggregatesFilter<"DepositOrder"> | boolean
    balancePaid?: BoolWithAggregatesFilter<"DepositOrder"> | boolean
    balanceDueDate?: DateTimeWithAggregatesFilter<"DepositOrder"> | Date | string
    sellingPlanId?: StringNullableWithAggregatesFilter<"DepositOrder"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DepositOrder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DepositOrder"> | Date | string
  }

  export type AppConfigurationWhereInput = {
    AND?: AppConfigurationWhereInput | AppConfigurationWhereInput[]
    OR?: AppConfigurationWhereInput[]
    NOT?: AppConfigurationWhereInput | AppConfigurationWhereInput[]
    id?: StringFilter<"AppConfiguration"> | string
    shopDomain?: StringFilter<"AppConfiguration"> | string
    defaultDepositPercent?: FloatFilter<"AppConfiguration"> | number
    defaultBalanceDays?: IntFilter<"AppConfiguration"> | number
    emailNotifications?: BoolFilter<"AppConfiguration"> | boolean
    autoApplyToProducts?: BoolFilter<"AppConfiguration"> | boolean
    createdAt?: DateTimeFilter<"AppConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"AppConfiguration"> | Date | string
  }

  export type AppConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
    emailNotifications?: SortOrder
    autoApplyToProducts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopDomain?: string
    AND?: AppConfigurationWhereInput | AppConfigurationWhereInput[]
    OR?: AppConfigurationWhereInput[]
    NOT?: AppConfigurationWhereInput | AppConfigurationWhereInput[]
    defaultDepositPercent?: FloatFilter<"AppConfiguration"> | number
    defaultBalanceDays?: IntFilter<"AppConfiguration"> | number
    emailNotifications?: BoolFilter<"AppConfiguration"> | boolean
    autoApplyToProducts?: BoolFilter<"AppConfiguration"> | boolean
    createdAt?: DateTimeFilter<"AppConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"AppConfiguration"> | Date | string
  }, "id" | "shopDomain">

  export type AppConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
    emailNotifications?: SortOrder
    autoApplyToProducts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppConfigurationCountOrderByAggregateInput
    _avg?: AppConfigurationAvgOrderByAggregateInput
    _max?: AppConfigurationMaxOrderByAggregateInput
    _min?: AppConfigurationMinOrderByAggregateInput
    _sum?: AppConfigurationSumOrderByAggregateInput
  }

  export type AppConfigurationScalarWhereWithAggregatesInput = {
    AND?: AppConfigurationScalarWhereWithAggregatesInput | AppConfigurationScalarWhereWithAggregatesInput[]
    OR?: AppConfigurationScalarWhereWithAggregatesInput[]
    NOT?: AppConfigurationScalarWhereWithAggregatesInput | AppConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AppConfiguration"> | string
    shopDomain?: StringWithAggregatesFilter<"AppConfiguration"> | string
    defaultDepositPercent?: FloatWithAggregatesFilter<"AppConfiguration"> | number
    defaultBalanceDays?: IntWithAggregatesFilter<"AppConfiguration"> | number
    emailNotifications?: BoolWithAggregatesFilter<"AppConfiguration"> | boolean
    autoApplyToProducts?: BoolWithAggregatesFilter<"AppConfiguration"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"AppConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AppConfiguration"> | Date | string
  }

  export type SellingPlanConfigWhereInput = {
    AND?: SellingPlanConfigWhereInput | SellingPlanConfigWhereInput[]
    OR?: SellingPlanConfigWhereInput[]
    NOT?: SellingPlanConfigWhereInput | SellingPlanConfigWhereInput[]
    id?: StringFilter<"SellingPlanConfig"> | string
    shopDomain?: StringFilter<"SellingPlanConfig"> | string
    sellingPlanGroupId?: StringFilter<"SellingPlanConfig"> | string
    sellingPlanId?: StringFilter<"SellingPlanConfig"> | string
    assignmentMode?: StringFilter<"SellingPlanConfig"> | string
    selectedProductIds?: StringNullableFilter<"SellingPlanConfig"> | string | null
    selectedCollectionIds?: StringNullableFilter<"SellingPlanConfig"> | string | null
    productsCount?: IntFilter<"SellingPlanConfig"> | number
    lastSyncedAt?: DateTimeNullableFilter<"SellingPlanConfig"> | Date | string | null
    createdAt?: DateTimeFilter<"SellingPlanConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SellingPlanConfig"> | Date | string
  }

  export type SellingPlanConfigOrderByWithRelationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanGroupId?: SortOrder
    sellingPlanId?: SortOrder
    assignmentMode?: SortOrder
    selectedProductIds?: SortOrderInput | SortOrder
    selectedCollectionIds?: SortOrderInput | SortOrder
    productsCount?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellingPlanConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sellingPlanGroupId?: string
    AND?: SellingPlanConfigWhereInput | SellingPlanConfigWhereInput[]
    OR?: SellingPlanConfigWhereInput[]
    NOT?: SellingPlanConfigWhereInput | SellingPlanConfigWhereInput[]
    shopDomain?: StringFilter<"SellingPlanConfig"> | string
    sellingPlanId?: StringFilter<"SellingPlanConfig"> | string
    assignmentMode?: StringFilter<"SellingPlanConfig"> | string
    selectedProductIds?: StringNullableFilter<"SellingPlanConfig"> | string | null
    selectedCollectionIds?: StringNullableFilter<"SellingPlanConfig"> | string | null
    productsCount?: IntFilter<"SellingPlanConfig"> | number
    lastSyncedAt?: DateTimeNullableFilter<"SellingPlanConfig"> | Date | string | null
    createdAt?: DateTimeFilter<"SellingPlanConfig"> | Date | string
    updatedAt?: DateTimeFilter<"SellingPlanConfig"> | Date | string
  }, "id" | "sellingPlanGroupId">

  export type SellingPlanConfigOrderByWithAggregationInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanGroupId?: SortOrder
    sellingPlanId?: SortOrder
    assignmentMode?: SortOrder
    selectedProductIds?: SortOrderInput | SortOrder
    selectedCollectionIds?: SortOrderInput | SortOrder
    productsCount?: SortOrder
    lastSyncedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SellingPlanConfigCountOrderByAggregateInput
    _avg?: SellingPlanConfigAvgOrderByAggregateInput
    _max?: SellingPlanConfigMaxOrderByAggregateInput
    _min?: SellingPlanConfigMinOrderByAggregateInput
    _sum?: SellingPlanConfigSumOrderByAggregateInput
  }

  export type SellingPlanConfigScalarWhereWithAggregatesInput = {
    AND?: SellingPlanConfigScalarWhereWithAggregatesInput | SellingPlanConfigScalarWhereWithAggregatesInput[]
    OR?: SellingPlanConfigScalarWhereWithAggregatesInput[]
    NOT?: SellingPlanConfigScalarWhereWithAggregatesInput | SellingPlanConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SellingPlanConfig"> | string
    shopDomain?: StringWithAggregatesFilter<"SellingPlanConfig"> | string
    sellingPlanGroupId?: StringWithAggregatesFilter<"SellingPlanConfig"> | string
    sellingPlanId?: StringWithAggregatesFilter<"SellingPlanConfig"> | string
    assignmentMode?: StringWithAggregatesFilter<"SellingPlanConfig"> | string
    selectedProductIds?: StringNullableWithAggregatesFilter<"SellingPlanConfig"> | string | null
    selectedCollectionIds?: StringNullableWithAggregatesFilter<"SellingPlanConfig"> | string | null
    productsCount?: IntWithAggregatesFilter<"SellingPlanConfig"> | number
    lastSyncedAt?: DateTimeNullableWithAggregatesFilter<"SellingPlanConfig"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SellingPlanConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SellingPlanConfig"> | Date | string
  }

  export type SessionCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUncheckedCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionCreateManyInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type DepositPlanCreateInput = {
    id?: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description?: string | null
    depositPercent?: number
    balanceDueDays?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: DepositOrderCreateNestedManyWithoutPlanInput
  }

  export type DepositPlanUncheckedCreateInput = {
    id?: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description?: string | null
    depositPercent?: number
    balanceDueDays?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    orders?: DepositOrderUncheckedCreateNestedManyWithoutPlanInput
  }

  export type DepositPlanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: DepositOrderUpdateManyWithoutPlanNestedInput
  }

  export type DepositPlanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orders?: DepositOrderUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type DepositPlanCreateManyInput = {
    id?: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description?: string | null
    depositPercent?: number
    balanceDueDays?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositPlanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositPlanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderCreateInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    plan?: DepositPlanCreateNestedOneWithoutOrdersInput
  }

  export type DepositOrderUncheckedCreateInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    sellingPlanId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositOrderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: DepositPlanUpdateOneWithoutOrdersNestedInput
  }

  export type DepositOrderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sellingPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderCreateManyInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    sellingPlanId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositOrderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    sellingPlanId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppConfigurationCreateInput = {
    id?: string
    shopDomain: string
    defaultDepositPercent?: number
    defaultBalanceDays?: number
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppConfigurationUncheckedCreateInput = {
    id?: string
    shopDomain: string
    defaultDepositPercent?: number
    defaultBalanceDays?: number
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    defaultDepositPercent?: FloatFieldUpdateOperationsInput | number
    defaultBalanceDays?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    autoApplyToProducts?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    defaultDepositPercent?: FloatFieldUpdateOperationsInput | number
    defaultBalanceDays?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    autoApplyToProducts?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppConfigurationCreateManyInput = {
    id?: string
    shopDomain: string
    defaultDepositPercent?: number
    defaultBalanceDays?: number
    emailNotifications?: boolean
    autoApplyToProducts?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    defaultDepositPercent?: FloatFieldUpdateOperationsInput | number
    defaultBalanceDays?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    autoApplyToProducts?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    defaultDepositPercent?: FloatFieldUpdateOperationsInput | number
    defaultBalanceDays?: IntFieldUpdateOperationsInput | number
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    autoApplyToProducts?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellingPlanConfigCreateInput = {
    id?: string
    shopDomain: string
    sellingPlanGroupId: string
    sellingPlanId: string
    assignmentMode: string
    selectedProductIds?: string | null
    selectedCollectionIds?: string | null
    productsCount?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellingPlanConfigUncheckedCreateInput = {
    id?: string
    shopDomain: string
    sellingPlanGroupId: string
    sellingPlanId: string
    assignmentMode: string
    selectedProductIds?: string | null
    selectedCollectionIds?: string | null
    productsCount?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellingPlanConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanGroupId?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    assignmentMode?: StringFieldUpdateOperationsInput | string
    selectedProductIds?: NullableStringFieldUpdateOperationsInput | string | null
    selectedCollectionIds?: NullableStringFieldUpdateOperationsInput | string | null
    productsCount?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellingPlanConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanGroupId?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    assignmentMode?: StringFieldUpdateOperationsInput | string
    selectedProductIds?: NullableStringFieldUpdateOperationsInput | string | null
    selectedCollectionIds?: NullableStringFieldUpdateOperationsInput | string | null
    productsCount?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellingPlanConfigCreateManyInput = {
    id?: string
    shopDomain: string
    sellingPlanGroupId: string
    sellingPlanId: string
    assignmentMode: string
    selectedProductIds?: string | null
    selectedCollectionIds?: string | null
    productsCount?: number
    lastSyncedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SellingPlanConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanGroupId?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    assignmentMode?: StringFieldUpdateOperationsInput | string
    selectedProductIds?: NullableStringFieldUpdateOperationsInput | string | null
    selectedCollectionIds?: NullableStringFieldUpdateOperationsInput | string | null
    productsCount?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellingPlanConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanGroupId?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    assignmentMode?: StringFieldUpdateOperationsInput | string
    selectedProductIds?: NullableStringFieldUpdateOperationsInput | string | null
    selectedCollectionIds?: NullableStringFieldUpdateOperationsInput | string | null
    productsCount?: IntFieldUpdateOperationsInput | number
    lastSyncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DepositOrderListRelationFilter = {
    every?: DepositOrderWhereInput
    some?: DepositOrderWhereInput
    none?: DepositOrderWhereInput
  }

  export type DepositOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepositPlanShopDomainSellingPlanIdCompoundUniqueInput = {
    shopDomain: string
    sellingPlanId: string
  }

  export type DepositPlanCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanId?: SortOrder
    sellingPlanGid?: SortOrder
    groupId?: SortOrder
    planName?: SortOrder
    merchantCode?: SortOrder
    description?: SortOrder
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositPlanAvgOrderByAggregateInput = {
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
  }

  export type DepositPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanId?: SortOrder
    sellingPlanGid?: SortOrder
    groupId?: SortOrder
    planName?: SortOrder
    merchantCode?: SortOrder
    description?: SortOrder
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositPlanMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanId?: SortOrder
    sellingPlanGid?: SortOrder
    groupId?: SortOrder
    planName?: SortOrder
    merchantCode?: SortOrder
    description?: SortOrder
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositPlanSumOrderByAggregateInput = {
    depositPercent?: SortOrder
    balanceDueDays?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DepositPlanNullableScalarRelationFilter = {
    is?: DepositPlanWhereInput | null
    isNot?: DepositPlanWhereInput | null
  }

  export type DepositOrderShopDomainOrderIdCompoundUniqueInput = {
    shopDomain: string
    orderId: string
  }

  export type DepositOrderCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    orderId?: SortOrder
    orderGid?: SortOrder
    orderNumber?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    tourName?: SortOrder
    travelers?: SortOrder
    arrivalDate?: SortOrder
    pickupAddress?: SortOrder
    campCategory?: SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
    depositPaid?: SortOrder
    balancePaid?: SortOrder
    balanceDueDate?: SortOrder
    sellingPlanId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositOrderAvgOrderByAggregateInput = {
    travelers?: SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type DepositOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    orderId?: SortOrder
    orderGid?: SortOrder
    orderNumber?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    tourName?: SortOrder
    travelers?: SortOrder
    arrivalDate?: SortOrder
    pickupAddress?: SortOrder
    campCategory?: SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
    depositPaid?: SortOrder
    balancePaid?: SortOrder
    balanceDueDate?: SortOrder
    sellingPlanId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositOrderMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    orderId?: SortOrder
    orderGid?: SortOrder
    orderNumber?: SortOrder
    customerId?: SortOrder
    customerEmail?: SortOrder
    customerName?: SortOrder
    customerPhone?: SortOrder
    tourName?: SortOrder
    travelers?: SortOrder
    arrivalDate?: SortOrder
    pickupAddress?: SortOrder
    campCategory?: SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
    depositPaid?: SortOrder
    balancePaid?: SortOrder
    balanceDueDate?: SortOrder
    sellingPlanId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepositOrderSumOrderByAggregateInput = {
    travelers?: SortOrder
    depositAmount?: SortOrder
    balanceAmount?: SortOrder
    totalAmount?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type AppConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
    emailNotifications?: SortOrder
    autoApplyToProducts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppConfigurationAvgOrderByAggregateInput = {
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
  }

  export type AppConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
    emailNotifications?: SortOrder
    autoApplyToProducts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
    emailNotifications?: SortOrder
    autoApplyToProducts?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppConfigurationSumOrderByAggregateInput = {
    defaultDepositPercent?: SortOrder
    defaultBalanceDays?: SortOrder
  }

  export type SellingPlanConfigCountOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanGroupId?: SortOrder
    sellingPlanId?: SortOrder
    assignmentMode?: SortOrder
    selectedProductIds?: SortOrder
    selectedCollectionIds?: SortOrder
    productsCount?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellingPlanConfigAvgOrderByAggregateInput = {
    productsCount?: SortOrder
  }

  export type SellingPlanConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanGroupId?: SortOrder
    sellingPlanId?: SortOrder
    assignmentMode?: SortOrder
    selectedProductIds?: SortOrder
    selectedCollectionIds?: SortOrder
    productsCount?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellingPlanConfigMinOrderByAggregateInput = {
    id?: SortOrder
    shopDomain?: SortOrder
    sellingPlanGroupId?: SortOrder
    sellingPlanId?: SortOrder
    assignmentMode?: SortOrder
    selectedProductIds?: SortOrder
    selectedCollectionIds?: SortOrder
    productsCount?: SortOrder
    lastSyncedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SellingPlanConfigSumOrderByAggregateInput = {
    productsCount?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type DepositOrderCreateNestedManyWithoutPlanInput = {
    create?: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput> | DepositOrderCreateWithoutPlanInput[] | DepositOrderUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: DepositOrderCreateOrConnectWithoutPlanInput | DepositOrderCreateOrConnectWithoutPlanInput[]
    createMany?: DepositOrderCreateManyPlanInputEnvelope
    connect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
  }

  export type DepositOrderUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput> | DepositOrderCreateWithoutPlanInput[] | DepositOrderUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: DepositOrderCreateOrConnectWithoutPlanInput | DepositOrderCreateOrConnectWithoutPlanInput[]
    createMany?: DepositOrderCreateManyPlanInputEnvelope
    connect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DepositOrderUpdateManyWithoutPlanNestedInput = {
    create?: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput> | DepositOrderCreateWithoutPlanInput[] | DepositOrderUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: DepositOrderCreateOrConnectWithoutPlanInput | DepositOrderCreateOrConnectWithoutPlanInput[]
    upsert?: DepositOrderUpsertWithWhereUniqueWithoutPlanInput | DepositOrderUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: DepositOrderCreateManyPlanInputEnvelope
    set?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    disconnect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    delete?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    connect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    update?: DepositOrderUpdateWithWhereUniqueWithoutPlanInput | DepositOrderUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: DepositOrderUpdateManyWithWhereWithoutPlanInput | DepositOrderUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: DepositOrderScalarWhereInput | DepositOrderScalarWhereInput[]
  }

  export type DepositOrderUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput> | DepositOrderCreateWithoutPlanInput[] | DepositOrderUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: DepositOrderCreateOrConnectWithoutPlanInput | DepositOrderCreateOrConnectWithoutPlanInput[]
    upsert?: DepositOrderUpsertWithWhereUniqueWithoutPlanInput | DepositOrderUpsertWithWhereUniqueWithoutPlanInput[]
    createMany?: DepositOrderCreateManyPlanInputEnvelope
    set?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    disconnect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    delete?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    connect?: DepositOrderWhereUniqueInput | DepositOrderWhereUniqueInput[]
    update?: DepositOrderUpdateWithWhereUniqueWithoutPlanInput | DepositOrderUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: DepositOrderUpdateManyWithWhereWithoutPlanInput | DepositOrderUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: DepositOrderScalarWhereInput | DepositOrderScalarWhereInput[]
  }

  export type DepositPlanCreateNestedOneWithoutOrdersInput = {
    create?: XOR<DepositPlanCreateWithoutOrdersInput, DepositPlanUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DepositPlanCreateOrConnectWithoutOrdersInput
    connect?: DepositPlanWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DepositPlanUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<DepositPlanCreateWithoutOrdersInput, DepositPlanUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: DepositPlanCreateOrConnectWithoutOrdersInput
    upsert?: DepositPlanUpsertWithoutOrdersInput
    disconnect?: DepositPlanWhereInput | boolean
    delete?: DepositPlanWhereInput | boolean
    connect?: DepositPlanWhereUniqueInput
    update?: XOR<XOR<DepositPlanUpdateToOneWithWhereWithoutOrdersInput, DepositPlanUpdateWithoutOrdersInput>, DepositPlanUncheckedUpdateWithoutOrdersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DepositOrderCreateWithoutPlanInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositOrderUncheckedCreateWithoutPlanInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositOrderCreateOrConnectWithoutPlanInput = {
    where: DepositOrderWhereUniqueInput
    create: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput>
  }

  export type DepositOrderCreateManyPlanInputEnvelope = {
    data: DepositOrderCreateManyPlanInput | DepositOrderCreateManyPlanInput[]
  }

  export type DepositOrderUpsertWithWhereUniqueWithoutPlanInput = {
    where: DepositOrderWhereUniqueInput
    update: XOR<DepositOrderUpdateWithoutPlanInput, DepositOrderUncheckedUpdateWithoutPlanInput>
    create: XOR<DepositOrderCreateWithoutPlanInput, DepositOrderUncheckedCreateWithoutPlanInput>
  }

  export type DepositOrderUpdateWithWhereUniqueWithoutPlanInput = {
    where: DepositOrderWhereUniqueInput
    data: XOR<DepositOrderUpdateWithoutPlanInput, DepositOrderUncheckedUpdateWithoutPlanInput>
  }

  export type DepositOrderUpdateManyWithWhereWithoutPlanInput = {
    where: DepositOrderScalarWhereInput
    data: XOR<DepositOrderUpdateManyMutationInput, DepositOrderUncheckedUpdateManyWithoutPlanInput>
  }

  export type DepositOrderScalarWhereInput = {
    AND?: DepositOrderScalarWhereInput | DepositOrderScalarWhereInput[]
    OR?: DepositOrderScalarWhereInput[]
    NOT?: DepositOrderScalarWhereInput | DepositOrderScalarWhereInput[]
    id?: StringFilter<"DepositOrder"> | string
    shopDomain?: StringFilter<"DepositOrder"> | string
    orderId?: StringFilter<"DepositOrder"> | string
    orderGid?: StringFilter<"DepositOrder"> | string
    orderNumber?: StringNullableFilter<"DepositOrder"> | string | null
    customerId?: StringNullableFilter<"DepositOrder"> | string | null
    customerEmail?: StringNullableFilter<"DepositOrder"> | string | null
    customerName?: StringNullableFilter<"DepositOrder"> | string | null
    customerPhone?: StringNullableFilter<"DepositOrder"> | string | null
    tourName?: StringNullableFilter<"DepositOrder"> | string | null
    travelers?: IntNullableFilter<"DepositOrder"> | number | null
    arrivalDate?: DateTimeNullableFilter<"DepositOrder"> | Date | string | null
    pickupAddress?: StringNullableFilter<"DepositOrder"> | string | null
    campCategory?: StringNullableFilter<"DepositOrder"> | string | null
    depositAmount?: FloatFilter<"DepositOrder"> | number
    balanceAmount?: FloatFilter<"DepositOrder"> | number
    totalAmount?: FloatFilter<"DepositOrder"> | number
    depositPaid?: BoolFilter<"DepositOrder"> | boolean
    balancePaid?: BoolFilter<"DepositOrder"> | boolean
    balanceDueDate?: DateTimeFilter<"DepositOrder"> | Date | string
    sellingPlanId?: StringNullableFilter<"DepositOrder"> | string | null
    createdAt?: DateTimeFilter<"DepositOrder"> | Date | string
    updatedAt?: DateTimeFilter<"DepositOrder"> | Date | string
  }

  export type DepositPlanCreateWithoutOrdersInput = {
    id?: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description?: string | null
    depositPercent?: number
    balanceDueDays?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositPlanUncheckedCreateWithoutOrdersInput = {
    id?: string
    shopDomain: string
    sellingPlanId: string
    sellingPlanGid: string
    groupId: string
    planName: string
    merchantCode: string
    description?: string | null
    depositPercent?: number
    balanceDueDays?: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositPlanCreateOrConnectWithoutOrdersInput = {
    where: DepositPlanWhereUniqueInput
    create: XOR<DepositPlanCreateWithoutOrdersInput, DepositPlanUncheckedCreateWithoutOrdersInput>
  }

  export type DepositPlanUpsertWithoutOrdersInput = {
    update: XOR<DepositPlanUpdateWithoutOrdersInput, DepositPlanUncheckedUpdateWithoutOrdersInput>
    create: XOR<DepositPlanCreateWithoutOrdersInput, DepositPlanUncheckedCreateWithoutOrdersInput>
    where?: DepositPlanWhereInput
  }

  export type DepositPlanUpdateToOneWithWhereWithoutOrdersInput = {
    where?: DepositPlanWhereInput
    data: XOR<DepositPlanUpdateWithoutOrdersInput, DepositPlanUncheckedUpdateWithoutOrdersInput>
  }

  export type DepositPlanUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositPlanUncheckedUpdateWithoutOrdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    sellingPlanId?: StringFieldUpdateOperationsInput | string
    sellingPlanGid?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    planName?: StringFieldUpdateOperationsInput | string
    merchantCode?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    depositPercent?: FloatFieldUpdateOperationsInput | number
    balanceDueDays?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderCreateManyPlanInput = {
    id?: string
    shopDomain: string
    orderId: string
    orderGid: string
    orderNumber?: string | null
    customerId?: string | null
    customerEmail?: string | null
    customerName?: string | null
    customerPhone?: string | null
    tourName?: string | null
    travelers?: number | null
    arrivalDate?: Date | string | null
    pickupAddress?: string | null
    campCategory?: string | null
    depositAmount: number
    balanceAmount: number
    totalAmount: number
    depositPaid?: boolean
    balancePaid?: boolean
    balanceDueDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepositOrderUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderUncheckedUpdateWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepositOrderUncheckedUpdateManyWithoutPlanInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopDomain?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    orderGid?: StringFieldUpdateOperationsInput | string
    orderNumber?: NullableStringFieldUpdateOperationsInput | string | null
    customerId?: NullableStringFieldUpdateOperationsInput | string | null
    customerEmail?: NullableStringFieldUpdateOperationsInput | string | null
    customerName?: NullableStringFieldUpdateOperationsInput | string | null
    customerPhone?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    travelers?: NullableIntFieldUpdateOperationsInput | number | null
    arrivalDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pickupAddress?: NullableStringFieldUpdateOperationsInput | string | null
    campCategory?: NullableStringFieldUpdateOperationsInput | string | null
    depositAmount?: FloatFieldUpdateOperationsInput | number
    balanceAmount?: FloatFieldUpdateOperationsInput | number
    totalAmount?: FloatFieldUpdateOperationsInput | number
    depositPaid?: BoolFieldUpdateOperationsInput | boolean
    balancePaid?: BoolFieldUpdateOperationsInput | boolean
    balanceDueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}