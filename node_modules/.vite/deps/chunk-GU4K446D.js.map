{
  "version": 3,
  "sources": ["../../compare-versions/src/utils.ts", "../../compare-versions/src/compareVersions.ts", "../../compare-versions/src/compare.ts", "../../@shopify/graphql-client/src/graphql-client/constants.ts", "../../@shopify/graphql-client/src/graphql-client/utilities.ts", "../../@shopify/graphql-client/src/graphql-client/http-fetch.ts", "../../@shopify/graphql-client/src/graphql-client/graphql-client.ts", "../../@shopify/graphql-client/src/api-client-utilities/validations.ts", "../../@shopify/graphql-client/src/api-client-utilities/api-versions.ts", "../../@shopify/graphql-client/src/api-client-utilities/utilities.ts", "../../@shopify/admin-api-client/src/constants.ts", "../../@shopify/admin-api-client/src/validations.ts", "../../@shopify/admin-api-client/src/graphql/client.ts", "../../@shopify/admin-api-client/src/rest/types.ts", "../../@shopify/admin-api-client/src/rest/client.ts"],
  "sourcesContent": ["/**\n * Allowed arithmetic operators\n */\nexport type CompareOperator = '>' | '>=' | '=' | '<' | '<=' | '!=';\n\nexport const semver =\n  /^[v^~<>=]*?(\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+)(?:\\.([x*]|\\d+))?(?:-([\\da-z\\-]+(?:\\.[\\da-z\\-]+)*))?(?:\\+[\\da-z\\-]+(?:\\.[\\da-z\\-]+)*)?)?)?$/i;\n\nexport const validateAndParse = (version: string) => {\n  if (typeof version !== 'string') {\n    throw new TypeError('Invalid argument expected string');\n  }\n  const match = version.match(semver);\n  if (!match) {\n    throw new Error(\n      `Invalid argument not valid semver ('${version}' received)`\n    );\n  }\n  match.shift();\n  return match;\n};\n\nconst isWildcard = (s: string) => s === '*' || s === 'x' || s === 'X';\n\nconst tryParse = (v: string) => {\n  const n = parseInt(v, 10);\n  return isNaN(n) ? v : n;\n};\n\nconst forceType = (a: string | number, b: string | number) =>\n  typeof a !== typeof b ? [String(a), String(b)] : [a, b];\n\nconst compareStrings = (a: string, b: string) => {\n  if (isWildcard(a) || isWildcard(b)) return 0;\n  const [ap, bp] = forceType(tryParse(a), tryParse(b));\n  if (ap > bp) return 1;\n  if (ap < bp) return -1;\n  return 0;\n};\n\nexport const compareSegments = (\n  a: string | string[] | RegExpMatchArray,\n  b: string | string[] | RegExpMatchArray\n) => {\n  for (let i = 0; i < Math.max(a.length, b.length); i++) {\n    const r = compareStrings(a[i] || '0', b[i] || '0');\n    if (r !== 0) return r;\n  }\n  return 0;\n};\n", "import { compareSegments, validateAndParse } from './utils.js';\n\n/**\n * Compare [semver](https://semver.org/) version strings to find greater, equal or lesser.\n * This library supports the full semver specification, including comparing versions with different number of digits like `1.0.0`, `1.0`, `1`, and pre-release versions like `1.0.0-alpha`.\n * @param v1 - First version to compare\n * @param v2 - Second version to compare\n * @returns Numeric value compatible with the [Array.sort(fn) interface](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Parameters).\n */\nexport const compareVersions = (v1: string, v2: string) => {\n  // validate input and split into segments\n  const n1 = validateAndParse(v1);\n  const n2 = validateAndParse(v2);\n\n  // pop off the patch\n  const p1 = n1.pop();\n  const p2 = n2.pop();\n\n  // validate numbers\n  const r = compareSegments(n1, n2);\n  if (r !== 0) return r;\n\n  // validate pre-release\n  if (p1 && p2) {\n    return compareSegments(p1.split('.'), p2.split('.'));\n  } else if (p1 || p2) {\n    return p1 ? -1 : 1;\n  }\n\n  return 0;\n};\n", "import { compareVersions } from './compareVersions.js';\nimport { CompareOperator } from './utils.js';\n\n/**\n * Compare [semver](https://semver.org/) version strings using the specified operator.\n *\n * @param v1 First version to compare\n * @param v2 Second version to compare\n * @param operator Allowed arithmetic operator to use\n * @returns `true` if the comparison between the firstVersion and the secondVersion satisfies the operator, `false` otherwise.\n *\n * @example\n * ```\n * compare('10.1.8', '10.0.4', '>'); // return true\n * compare('10.0.1', '10.0.1', '='); // return true\n * compare('10.1.1', '10.2.2', '<'); // return true\n * compare('10.1.1', '10.2.2', '<='); // return true\n * compare('10.1.1', '10.2.2', '>='); // return false\n * ```\n */\nexport const compare = (v1: string, v2: string, operator: CompareOperator) => {\n  // validate input operator\n  assertValidOperator(operator);\n\n  // since result of compareVersions can only be -1 or 0 or 1\n  // a simple map can be used to replace switch\n  const res = compareVersions(v1, v2);\n\n  return operatorResMap[operator].includes(res);\n};\n\nconst operatorResMap = {\n  '>': [1],\n  '>=': [0, 1],\n  '=': [0],\n  '<=': [-1, 0],\n  '<': [-1],\n  '!=': [-1, 1],\n};\n\nconst allowedOperators = Object.keys(operatorResMap);\n\nconst assertValidOperator = (op: string) => {\n  if (typeof op !== 'string') {\n    throw new TypeError(\n      `Invalid operator type, expected string but got ${typeof op}`\n    );\n  }\n  if (allowedOperators.indexOf(op) === -1) {\n    throw new Error(\n      `Invalid operator, expected one of ${allowedOperators.join('|')}`\n    );\n  }\n};\n", "export const CLIENT = 'GraphQL Client';\nexport const MIN_RETRIES = 0;\nexport const MAX_RETRIES = 3;\n\nexport const GQL_API_ERROR =\n  \"An error occurred while fetching from the API. Review 'graphQLErrors' for details.\";\nexport const UNEXPECTED_CONTENT_TYPE_ERROR =\n  'Response returned unexpected Content-Type:';\nexport const NO_DATA_OR_ERRORS_ERROR =\n  'An unknown error has occurred. The API did not return a data object or any errors in its response.';\n\nexport const CONTENT_TYPES = {\n  json: 'application/json',\n  multipart: 'multipart/mixed',\n};\nexport const SDK_VARIANT_HEADER = 'X-SDK-Variant';\nexport const SDK_VERSION_HEADER = 'X-SDK-Version';\n\nexport const DEFAULT_SDK_VARIANT = 'shopify-graphql-client';\n// This is value is replaced with package.json version during rollup build process\nexport const DEFAULT_CLIENT_VERSION = 'ROLLUP_REPLACE_CLIENT_VERSION';\n\nexport const RETRY_WAIT_TIME = 1000;\nexport const RETRIABLE_STATUS_CODES = [429, 503];\nexport const DEFER_OPERATION_REGEX = /@(defer)\\b/i;\nexport const NEWLINE_SEPARATOR = '\\r\\n';\nexport const BOUNDARY_HEADER_REGEX = /boundary=\"?([^=\";]+)\"?/i;\nexport const HEADER_SEPARATOR = NEWLINE_SEPARATOR + NEWLINE_SEPARATOR;\n", "import {CLIENT, MAX_RETRIES, MIN_RETRIES} from './constants';\n\nexport function formatErrorMessage(message: string, client = CLIENT) {\n  return message.startsWith(`${client}`) ? message : `${client}: ${message}`;\n}\n\nexport function getErrorMessage(error: any) {\n  return error instanceof Error ? error.message : JSON.stringify(error);\n}\n\nexport function getErrorCause(error: any): Record<string, any> | undefined {\n  return error instanceof Error && error.cause ? error.cause : undefined;\n}\n\nexport function combineErrors(dataArray: Record<string, any>[]) {\n  return dataArray.flatMap(({errors}) => {\n    return errors ?? [];\n  });\n}\n\nexport function validateRetries({\n  client,\n  retries,\n}: {\n  client: string;\n  retries?: number;\n}) {\n  if (\n    retries !== undefined &&\n    (typeof retries !== 'number' ||\n      retries < MIN_RETRIES ||\n      retries > MAX_RETRIES)\n  ) {\n    throw new Error(\n      `${client}: The provided \"retries\" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`,\n    );\n  }\n}\n\nexport function getKeyValueIfValid(key: string, value?: any) {\n  return value &&\n    (typeof value !== 'object' ||\n      Array.isArray(value) ||\n      (typeof value === 'object' && Object.keys(value).length > 0))\n    ? {[key]: value}\n    : {};\n}\n\nexport function buildDataObjectByPath(\n  path: string[],\n  data: any,\n): Record<string | number, any> {\n  if (path.length === 0) {\n    return data;\n  }\n\n  const key = path.pop() as string | number;\n  const newData = {\n    [key]: data,\n  };\n\n  if (path.length === 0) {\n    return newData;\n  }\n\n  return buildDataObjectByPath(path, newData);\n}\n\nfunction combineObjects(baseObject: any, newObject: any) {\n  return Object.keys(newObject || {}).reduce(\n    (acc: any, key: string | number) => {\n      if (\n        (typeof newObject[key] === 'object' || Array.isArray(newObject[key])) &&\n        baseObject[key]\n      ) {\n        acc[key] = combineObjects(baseObject[key], newObject[key]);\n        return acc;\n      }\n\n      acc[key] = newObject[key];\n      return acc;\n    },\n    Array.isArray(baseObject) ? [...baseObject] : {...baseObject},\n  );\n}\n\nexport function buildCombinedDataObject([\n  initialDatum,\n  ...remainingData\n]: any[]) {\n  return remainingData.reduce(combineObjects, {...initialDatum});\n}\n", "import {CLIENT, RETRIABLE_STATUS_CODES, RETRY_WAIT_TIME} from './constants';\nimport {CustomFetchApi, GraphQLClient, Logger} from './types';\nimport {formatErrorMessage, getErrorMessage} from './utilities';\n\ninterface GenerateHttpFetchOptions {\n  clientLogger: Logger;\n  customFetchApi?: CustomFetchApi;\n  client?: string;\n  defaultRetryWaitTime?: number;\n  retriableCodes?: number[];\n}\n\nexport function generateHttpFetch({\n  clientLogger,\n  customFetchApi = fetch,\n  client = CLIENT,\n  defaultRetryWaitTime = RETRY_WAIT_TIME,\n  retriableCodes = RETRIABLE_STATUS_CODES,\n}: GenerateHttpFetchOptions) {\n  const httpFetch = async (\n    requestParams: Parameters<CustomFetchApi>,\n    count: number,\n    maxRetries: number,\n  ): ReturnType<GraphQLClient['fetch']> => {\n    const nextCount = count + 1;\n    const maxTries = maxRetries + 1;\n    let response: Response | undefined;\n\n    try {\n      response = await customFetchApi(...requestParams);\n\n      clientLogger({\n        type: 'HTTP-Response',\n        content: {\n          requestParams,\n          response,\n        },\n      });\n\n      if (\n        !response.ok &&\n        retriableCodes.includes(response.status) &&\n        nextCount <= maxTries\n      ) {\n        throw new Error();\n      }\n\n      const deprecationNotice =\n        response?.headers.get('X-Shopify-API-Deprecated-Reason') || '';\n      if (deprecationNotice) {\n        clientLogger({\n          type: 'HTTP-Response-GraphQL-Deprecation-Notice',\n          content: {\n            requestParams,\n            deprecationNotice,\n          },\n        });\n      }\n\n      return response;\n    } catch (error) {\n      if (nextCount <= maxTries) {\n        const retryAfter = response?.headers.get('Retry-After');\n        await sleep(\n          retryAfter ? parseInt(retryAfter, 10) : defaultRetryWaitTime,\n        );\n\n        clientLogger({\n          type: 'HTTP-Retry',\n          content: {\n            requestParams,\n            lastResponse: response,\n            retryAttempt: count,\n            maxRetries,\n          },\n        });\n\n        return httpFetch(requestParams, nextCount, maxRetries);\n      }\n\n      throw new Error(\n        formatErrorMessage(\n          `${\n            maxRetries > 0\n              ? `Attempted maximum number of ${maxRetries} network retries. Last message - `\n              : ''\n          }${getErrorMessage(error)}`,\n          client,\n        ),\n      );\n    }\n  };\n\n  return httpFetch;\n}\n\nasync function sleep(waitTime: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\n", "import {generateHttpFetch} from './http-fetch';\nimport {\n  ClientOptions,\n  CustomFetchApi,\n  GraphQLClient,\n  ClientResponse,\n  ClientConfig,\n  Logger,\n  LogContentTypes,\n  DataChunk,\n} from './types';\nimport {\n  CLIENT,\n  GQL_API_ERROR,\n  UNEXPECTED_CONTENT_TYPE_ERROR,\n  NO_DATA_OR_ERRORS_ERROR,\n  CONTENT_TYPES,\n  RETRY_WAIT_TIME,\n  HEADER_SEPARATOR,\n  DEFER_OPERATION_REGEX,\n  BOUNDARY_HEADER_REGEX,\n  SDK_VARIANT_HEADER,\n  SDK_VERSION_HEADER,\n  DEFAULT_SDK_VARIANT,\n  DEFAULT_CLIENT_VERSION,\n} from './constants';\nimport {\n  formatErrorMessage,\n  getErrorMessage,\n  validateRetries,\n  getKeyValueIfValid,\n  buildDataObjectByPath,\n  buildCombinedDataObject,\n  getErrorCause,\n  combineErrors,\n} from './utilities';\n\nexport function createGraphQLClient({\n  headers,\n  url,\n  customFetchApi = fetch,\n  retries = 0,\n  logger,\n}: ClientOptions): GraphQLClient {\n  validateRetries({client: CLIENT, retries});\n\n  const config: ClientConfig = {\n    headers,\n    url,\n    retries,\n  };\n\n  const clientLogger = generateClientLogger(logger);\n  const httpFetch = generateHttpFetch({\n    customFetchApi,\n    clientLogger,\n    defaultRetryWaitTime: RETRY_WAIT_TIME,\n  });\n  const fetchFn = generateFetch(httpFetch, config);\n  const request = generateRequest(fetchFn);\n  const requestStream = generateRequestStream(fetchFn);\n\n  return {\n    config,\n    fetch: fetchFn,\n    request,\n    requestStream,\n  };\n}\n\nexport function generateClientLogger(logger?: Logger): Logger {\n  return (logContent: LogContentTypes) => {\n    if (logger) {\n      logger(logContent);\n    }\n  };\n}\n\nasync function processJSONResponse<TData = any>(\n  response: Response,\n): Promise<ClientResponse<TData>> {\n  const {errors, data, extensions} = await response.json<any>();\n\n  return {\n    ...getKeyValueIfValid('data', data),\n    ...getKeyValueIfValid('extensions', extensions),\n    headers: response.headers,\n\n    ...(errors || !data\n      ? {\n          errors: {\n            networkStatusCode: response.status,\n            message: formatErrorMessage(\n              errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR,\n            ),\n            ...getKeyValueIfValid('graphQLErrors', errors),\n            response,\n          },\n        }\n      : {}),\n  };\n}\n\nfunction generateFetch(\n  httpFetch: ReturnType<typeof generateHttpFetch>,\n  {url, headers, retries}: ClientConfig,\n): GraphQLClient['fetch'] {\n  return async (operation, options = {}) => {\n    const {\n      variables,\n      headers: overrideHeaders,\n      url: overrideUrl,\n      retries: overrideRetries,\n      keepalive,\n      signal,\n    } = options;\n\n    const body = JSON.stringify({\n      query: operation,\n      variables,\n    });\n\n    validateRetries({client: CLIENT, retries: overrideRetries});\n\n    const flatHeaders = Object.entries({\n      ...headers,\n      ...overrideHeaders,\n    }).reduce((headers: Record<string, string>, [key, value]) => {\n      headers[key] = Array.isArray(value) ? value.join(', ') : value.toString();\n      return headers;\n    }, {});\n\n    if (!flatHeaders[SDK_VARIANT_HEADER] && !flatHeaders[SDK_VERSION_HEADER]) {\n      flatHeaders[SDK_VARIANT_HEADER] = DEFAULT_SDK_VARIANT;\n      flatHeaders[SDK_VERSION_HEADER] = DEFAULT_CLIENT_VERSION;\n    }\n\n    const fetchParams: Parameters<CustomFetchApi> = [\n      overrideUrl ?? url,\n      {\n        method: 'POST',\n        headers: flatHeaders,\n        body,\n        signal,\n        keepalive,\n      },\n    ];\n\n    return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n  };\n}\n\nfunction generateRequest(\n  fetchFn: ReturnType<typeof generateFetch>,\n): GraphQLClient['request'] {\n  return async (...props) => {\n    if (DEFER_OPERATION_REGEX.test(props[0])) {\n      throw new Error(\n        formatErrorMessage(\n          'This operation will result in a streamable response - use requestStream() instead.',\n        ),\n      );\n    }\n\n    let response: Response | null = null;\n    try {\n      response = await fetchFn(...props);\n      const {status, statusText} = response;\n      const contentType = response.headers.get('content-type') || '';\n\n      if (!response.ok) {\n        return {\n          errors: {\n            networkStatusCode: status,\n            message: formatErrorMessage(statusText),\n            response,\n          },\n        };\n      }\n\n      if (!contentType.includes(CONTENT_TYPES.json)) {\n        return {\n          errors: {\n            networkStatusCode: status,\n            message: formatErrorMessage(\n              `${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`,\n            ),\n            response,\n          },\n        };\n      }\n\n      return await processJSONResponse(response);\n    } catch (error) {\n      return {\n        errors: {\n          message: getErrorMessage(error),\n          ...(response == null\n            ? {}\n            : {\n                networkStatusCode: response.status,\n                response,\n              }),\n        },\n      };\n    }\n  };\n}\n\nasync function* getStreamBodyIterator(\n  response: Response,\n): AsyncIterableIterator<string> {\n  const decoder = new TextDecoder();\n\n  // Response body is an async iterator\n  if ((response.body as any)![Symbol.asyncIterator]) {\n    for await (const chunk of response.body! as any) {\n      yield decoder.decode(chunk);\n    }\n  } else {\n    const reader = response.body!.getReader();\n\n    let readResult: ReadableStreamReadResult<DataChunk>;\n    try {\n      while (!(readResult = await reader.read()).done) {\n        yield decoder.decode(readResult.value);\n      }\n    } finally {\n      reader.cancel();\n    }\n  }\n}\n\nfunction readStreamChunk(\n  streamBodyIterator: AsyncIterableIterator<string>,\n  boundary: string,\n) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      try {\n        let buffer = '';\n\n        for await (const textChunk of streamBodyIterator) {\n          buffer += textChunk;\n\n          if (buffer.indexOf(boundary) > -1) {\n            const lastBoundaryIndex = buffer.lastIndexOf(boundary);\n            const fullResponses = buffer.slice(0, lastBoundaryIndex);\n\n            const chunkBodies = fullResponses\n              .split(boundary)\n              .filter((chunk) => chunk.trim().length > 0)\n              .map((chunk) => {\n                const body = chunk\n                  .slice(\n                    chunk.indexOf(HEADER_SEPARATOR) + HEADER_SEPARATOR.length,\n                  )\n                  .trim();\n                return body;\n              });\n\n            if (chunkBodies.length > 0) {\n              yield chunkBodies;\n            }\n\n            buffer = buffer.slice(lastBoundaryIndex + boundary.length);\n\n            if (buffer.trim() === `--`) {\n              buffer = '';\n            }\n          }\n        }\n      } catch (error) {\n        throw new Error(\n          `Error occured while processing stream payload - ${getErrorMessage(\n            error,\n          )}`,\n        );\n      }\n    },\n  };\n}\n\nfunction createJsonResponseAsyncIterator(response: Response) {\n  return {\n    async *[Symbol.asyncIterator]() {\n      const processedResponse = await processJSONResponse(response);\n\n      yield {\n        ...processedResponse,\n        hasNext: false,\n      };\n    },\n  };\n}\n\nfunction getResponseDataFromChunkBodies(chunkBodies: string[]): {\n  data: any;\n  errors?: any;\n  extensions?: any;\n  hasNext: boolean;\n}[] {\n  return chunkBodies\n    .map((value) => {\n      try {\n        return JSON.parse(value);\n      } catch (error) {\n        throw new Error(\n          `Error in parsing multipart response - ${getErrorMessage(error)}`,\n        );\n      }\n    })\n    .map((payload) => {\n      const {data, incremental, hasNext, extensions, errors} = payload;\n\n      // initial data chunk\n      if (!incremental) {\n        return {\n          data: data || {},\n          ...getKeyValueIfValid('errors', errors),\n          ...getKeyValueIfValid('extensions', extensions),\n          hasNext,\n        };\n      }\n\n      // subsequent data chunks\n      const incrementalArray: {data: any; errors?: any}[] = incremental.map(\n        ({data, path, errors}: any) => {\n          return {\n            data: data && path ? buildDataObjectByPath(path, data) : {},\n            ...getKeyValueIfValid('errors', errors),\n          };\n        },\n      );\n\n      return {\n        data:\n          incrementalArray.length === 1\n            ? incrementalArray[0].data\n            : buildCombinedDataObject([\n                ...incrementalArray.map(({data}) => data),\n              ]),\n        ...getKeyValueIfValid('errors', combineErrors(incrementalArray)),\n        hasNext,\n      };\n    });\n}\n\nfunction validateResponseData(\n  responseErrors: any[],\n  combinedData: ReturnType<typeof buildCombinedDataObject>,\n) {\n  if (responseErrors.length > 0) {\n    throw new Error(GQL_API_ERROR, {\n      cause: {\n        graphQLErrors: responseErrors,\n      },\n    });\n  }\n\n  if (Object.keys(combinedData).length === 0) {\n    throw new Error(NO_DATA_OR_ERRORS_ERROR);\n  }\n}\n\nfunction createMultipartResponseAsyncInterator(\n  response: Response,\n  responseContentType: string,\n) {\n  const boundaryHeader = (responseContentType ?? '').match(\n    BOUNDARY_HEADER_REGEX,\n  );\n  const boundary = `--${boundaryHeader ? boundaryHeader[1] : '-'}`;\n\n  if (\n    !response.body?.getReader &&\n    !(response.body as any)?.[Symbol.asyncIterator]\n  ) {\n    throw new Error('API multipart response did not return an iterable body', {\n      cause: response,\n    });\n  }\n\n  const streamBodyIterator = getStreamBodyIterator(response);\n\n  let combinedData: Record<string, any> = {};\n  let responseExtensions: Record<string, any> | undefined;\n\n  return {\n    async *[Symbol.asyncIterator]() {\n      try {\n        let streamHasNext = true;\n\n        for await (const chunkBodies of readStreamChunk(\n          streamBodyIterator,\n          boundary,\n        )) {\n          const responseData = getResponseDataFromChunkBodies(chunkBodies);\n\n          responseExtensions =\n            responseData.find((datum) => datum.extensions)?.extensions ??\n            responseExtensions;\n\n          const responseErrors = combineErrors(responseData);\n\n          combinedData = buildCombinedDataObject([\n            combinedData,\n            ...responseData.map(({data}) => data),\n          ]);\n\n          streamHasNext = responseData.slice(-1)[0].hasNext;\n\n          validateResponseData(responseErrors, combinedData);\n\n          yield {\n            ...getKeyValueIfValid('data', combinedData),\n            ...getKeyValueIfValid('extensions', responseExtensions),\n            hasNext: streamHasNext,\n          };\n        }\n\n        if (streamHasNext) {\n          throw new Error(`Response stream terminated unexpectedly`);\n        }\n      } catch (error) {\n        const cause = getErrorCause(error);\n\n        yield {\n          ...getKeyValueIfValid('data', combinedData),\n          ...getKeyValueIfValid('extensions', responseExtensions),\n          errors: {\n            message: formatErrorMessage(getErrorMessage(error)),\n            networkStatusCode: response.status,\n            ...getKeyValueIfValid('graphQLErrors', cause?.graphQLErrors),\n            response,\n          },\n          hasNext: false,\n        };\n      }\n    },\n  };\n}\n\nfunction generateRequestStream(\n  fetchFn: ReturnType<typeof generateFetch>,\n): GraphQLClient['requestStream'] {\n  return async (...props) => {\n    if (!DEFER_OPERATION_REGEX.test(props[0])) {\n      throw new Error(\n        formatErrorMessage(\n          'This operation does not result in a streamable response - use request() instead.',\n        ),\n      );\n    }\n\n    try {\n      const response = await fetchFn(...props);\n\n      const {statusText} = response;\n\n      if (!response.ok) {\n        throw new Error(statusText, {cause: response});\n      }\n\n      const responseContentType = response.headers.get('content-type') || '';\n\n      switch (true) {\n        case responseContentType.includes(CONTENT_TYPES.json):\n          return createJsonResponseAsyncIterator(response);\n        case responseContentType.includes(CONTENT_TYPES.multipart):\n          return createMultipartResponseAsyncInterator(\n            response,\n            responseContentType,\n          );\n        default:\n          throw new Error(\n            `${UNEXPECTED_CONTENT_TYPE_ERROR} ${responseContentType}`,\n            {cause: response},\n          );\n      }\n    } catch (error) {\n      return {\n        async *[Symbol.asyncIterator]() {\n          const response = getErrorCause(error);\n\n          yield {\n            errors: {\n              message: formatErrorMessage(getErrorMessage(error)),\n              ...getKeyValueIfValid('networkStatusCode', response?.status),\n              ...getKeyValueIfValid('response', response),\n            },\n            hasNext: false,\n          };\n        },\n      };\n    }\n  };\n}\n", "import {ApiClientLogger} from './types';\n\nexport function validateDomainAndGetStoreUrl({\n  client,\n  storeDomain,\n}: {\n  client: string;\n  storeDomain: string | undefined;\n}) {\n  try {\n    if (!storeDomain || typeof storeDomain !== 'string') {\n      throw new Error();\n    }\n\n    const trimmedDomain = storeDomain.trim();\n\n    const protocolUrl = trimmedDomain.match(/^https?:/)\n      ? trimmedDomain\n      : `https://${trimmedDomain}`;\n\n    const url = new URL(protocolUrl);\n    url.protocol = 'https';\n\n    return url.origin;\n  } catch (error) {\n    throw new Error(\n      `${client}: a valid store domain (\"${storeDomain}\") must be provided`,\n      {cause: error},\n    );\n  }\n}\n\nexport function validateApiVersion({\n  client,\n  currentSupportedApiVersions,\n  apiVersion,\n  logger,\n}: {\n  client: string;\n  currentSupportedApiVersions: string[];\n  apiVersion: string;\n  logger?: ApiClientLogger;\n}) {\n  const versionError = `${client}: the provided apiVersion (\"${apiVersion}\")`;\n  const supportedVersion = `Currently supported API versions: ${currentSupportedApiVersions.join(\n    ', ',\n  )}`;\n\n  if (!apiVersion || typeof apiVersion !== 'string') {\n    throw new Error(`${versionError} is invalid. ${supportedVersion}`);\n  }\n\n  const trimmedApiVersion = apiVersion.trim();\n\n  if (!currentSupportedApiVersions.includes(trimmedApiVersion)) {\n    if (logger) {\n      logger({\n        type: 'Unsupported_Api_Version',\n        content: {\n          apiVersion,\n          supportedApiVersions: currentSupportedApiVersions,\n        },\n      });\n    } else {\n      console.warn(\n        `${versionError} is likely deprecated or not supported. ${supportedVersion}`,\n      );\n    }\n  }\n}\n", "function getQuarterMonth(quarter: number) {\n  const month = quarter * 3 - 2;\n  return month === 10 ? month : `0${month}`;\n}\n\nfunction getPrevousVersion(year: number, quarter: number, nQuarter: number) {\n  const versionQuarter = quarter - nQuarter;\n\n  if (versionQuarter <= 0) {\n    return `${year - 1}-${getQuarterMonth(versionQuarter + 4)}`;\n  }\n\n  return `${year}-${getQuarterMonth(versionQuarter)}`;\n}\n\nexport function getCurrentApiVersion() {\n  const date = new Date();\n  const month = date.getUTCMonth();\n  const year = date.getUTCFullYear();\n\n  const quarter = Math.floor(month / 3 + 1);\n\n  return {\n    year,\n    quarter,\n    version: `${year}-${getQuarterMonth(quarter)}`,\n  };\n}\n\nexport function getCurrentSupportedApiVersions() {\n  const {year, quarter, version: currentVersion} = getCurrentApiVersion();\n\n  const nextVersion =\n    quarter === 4\n      ? `${year + 1}-01`\n      : `${year}-${getQuarterMonth(quarter + 1)}`;\n\n  return [\n    getPrevousVersion(year, quarter, 3),\n    getPrevousVersion(year, quarter, 2),\n    getPrevousVersion(year, quarter, 1),\n    currentVersion,\n    nextVersion,\n    'unstable',\n  ];\n}\n", "import {RequestParams} from '../graphql-client/types';\n\nimport {\n  AllOperations,\n  ApiClient,\n  ApiClientConfig,\n  ApiClientRequestOptions,\n} from './types';\n\nexport function generateGetHeaders(\n  config: ApiClientConfig,\n): ApiClient['getHeaders'] {\n  return (customHeaders) => {\n    return {...(customHeaders ?? {}), ...config.headers};\n  };\n}\n\nexport function generateGetGQLClientParams<\n  Operations extends AllOperations = AllOperations,\n>({getHeaders, getApiUrl}: Pick<ApiClient, 'getHeaders' | 'getApiUrl'>) {\n  return <Operation extends keyof Operations>(\n    operation: Operation,\n    options?: ApiClientRequestOptions<Operation, Operations>,\n  ): RequestParams => {\n    const props: RequestParams = [operation as string];\n\n    if (options && Object.keys(options).length > 0) {\n      const {\n        variables,\n        apiVersion: propApiVersion,\n        headers,\n        retries,\n        signal,\n      } = options as any;\n\n      props.push({\n        ...(variables ? {variables} : {}),\n        ...(headers ? {headers: getHeaders(headers)} : {}),\n        ...(propApiVersion ? {url: getApiUrl(propApiVersion)} : {}),\n        ...(retries ? {retries} : {}),\n        ...(signal ? {signal} : {}),\n      });\n    }\n\n    return props;\n  };\n}\n", "export const DEFAULT_CONTENT_TYPE = 'application/json';\n// This is value is replaced with package.json version during rollup build process\nexport const DEFAULT_CLIENT_VERSION = 'ROLLUP_REPLACE_CLIENT_VERSION';\nexport const ACCESS_TOKEN_HEADER = 'X-Shopify-Access-Token';\nexport const CLIENT = 'Admin API Client';\nexport const RETRIABLE_STATUS_CODES = [429, 500, 503];\nexport const DEFAULT_RETRY_WAIT_TIME = 1000;\n", "import {CLIENT} from './constants';\n\nexport function validateRequiredStoreDomain(storeDomain: string | undefined) {\n  if (\n    !storeDomain ||\n    typeof storeDomain !== 'string' ||\n    storeDomain.trim().length < 1\n  ) {\n    throw new Error(`${CLIENT}: a valid store domain must be provided`);\n  }\n}\n\nexport function validateRequiredAccessToken(accessToken: string) {\n  if (!accessToken) {\n    throw new Error(`${CLIENT}: an access token must be provided`);\n  }\n}\n\nexport function validateServerSideUsage(isTesting = false) {\n  if (typeof window !== 'undefined' && !isTesting) {\n    throw new Error(`${CLIENT}: this client should not be used in the browser`);\n  }\n}\n", "import {\n  createGraphQLClient,\n  getCurrentSupportedApiVersions,\n  validateApiVersion,\n  validateDomainAndGetStoreUrl,\n  generateGetGQLClientParams,\n  generateGetHeaders,\n} from '@shopify/graphql-client';\n\nimport {\n  DEFAULT_CONTENT_TYPE,\n  ACCESS_TOKEN_HEADER,\n  CLIENT,\n  DEFAULT_CLIENT_VERSION,\n} from '../constants';\nimport {\n  validateRequiredAccessToken,\n  validateServerSideUsage,\n} from '../validations';\nimport {AdminApiClientConfig, AdminApiClientOptions} from '../types';\n\nimport {AdminApiClient, AdminOperations} from './types';\n\nexport function createAdminApiClient({\n  storeDomain,\n  apiVersion,\n  accessToken,\n  userAgentPrefix,\n  retries = 0,\n  customFetchApi,\n  logger,\n  isTesting,\n}: AdminApiClientOptions): AdminApiClient {\n  const currentSupportedApiVersions = getCurrentSupportedApiVersions();\n\n  const storeUrl = validateDomainAndGetStoreUrl({\n    client: CLIENT,\n    storeDomain,\n  });\n\n  const baseApiVersionValidationParams = {\n    client: CLIENT,\n    currentSupportedApiVersions,\n    logger,\n  };\n\n  validateServerSideUsage(isTesting);\n  validateApiVersion({\n    client: CLIENT,\n    currentSupportedApiVersions,\n    apiVersion,\n    logger,\n  });\n  validateRequiredAccessToken(accessToken);\n\n  const apiUrlFormatter = generateApiUrlFormatter(\n    storeUrl,\n    apiVersion,\n    baseApiVersionValidationParams,\n  );\n\n  const config: AdminApiClientConfig = {\n    storeDomain: storeUrl,\n    apiVersion,\n    accessToken,\n    headers: {\n      'Content-Type': DEFAULT_CONTENT_TYPE,\n      Accept: DEFAULT_CONTENT_TYPE,\n      [ACCESS_TOKEN_HEADER]: accessToken,\n      'User-Agent': `${\n        userAgentPrefix ? `${userAgentPrefix} | ` : ''\n      }${CLIENT} v${DEFAULT_CLIENT_VERSION}`,\n    },\n    apiUrl: apiUrlFormatter(),\n    userAgentPrefix,\n  };\n\n  const graphqlClient = createGraphQLClient({\n    headers: config.headers,\n    url: config.apiUrl,\n    retries,\n    customFetchApi,\n    logger,\n  });\n\n  const getHeaders = generateGetHeaders(config);\n  const getApiUrl = generateGetApiUrl(config, apiUrlFormatter);\n\n  const getGQLClientParams = generateGetGQLClientParams<AdminOperations>({\n    getHeaders,\n    getApiUrl,\n  });\n\n  const client: AdminApiClient = {\n    config,\n    getHeaders,\n    getApiUrl,\n    fetch: (...props) => {\n      return graphqlClient.fetch(...getGQLClientParams(...props));\n    },\n    request: (...props) => {\n      return graphqlClient.request(...getGQLClientParams(...props));\n    },\n  };\n\n  return Object.freeze(client);\n}\n\nfunction generateApiUrlFormatter(\n  storeUrl: string,\n  defaultApiVersion: string,\n  baseApiVersionValidationParams: Omit<\n    Parameters<typeof validateApiVersion>[0],\n    'apiVersion'\n  >,\n) {\n  return (apiVersion?: string) => {\n    if (apiVersion) {\n      validateApiVersion({\n        ...baseApiVersionValidationParams,\n        apiVersion,\n      });\n    }\n\n    const urlApiVersion = (apiVersion ?? defaultApiVersion).trim();\n\n    return `${storeUrl}/admin/api/${urlApiVersion}/graphql.json`;\n  };\n}\n\nfunction generateGetApiUrl(\n  config: AdminApiClientConfig,\n  apiUrlFormatter: (version?: string) => string,\n): AdminApiClient['getApiUrl'] {\n  return (propApiVersion?: string) => {\n    return propApiVersion ? apiUrlFormatter(propApiVersion) : config.apiUrl;\n  };\n}\n", "import {CustomFetchApi} from '@shopify/graphql-client';\n\nimport {AdminApiClientOptions} from '../types';\n\nexport enum Method {\n  Get = 'GET',\n  Post = 'POST',\n  Put = 'PUT',\n  Delete = 'DELETE',\n}\n\ntype SearchParamField = string | number;\nexport type SearchParamFields =\n  | SearchParamField\n  | SearchParamField[]\n  | Record<string, SearchParamField | SearchParamField[]>;\nexport type SearchParams = Record<string, SearchParamFields>;\n\nexport type HeaderOptions = Record<string, string | number | string[]>;\n\nexport interface GetRequestOptions {\n  headers?: HeaderOptions;\n  data?: Record<string, any> | string;\n  searchParams?: SearchParams;\n  retries?: number;\n  apiVersion?: string;\n}\n\nexport interface PostRequestOptions extends GetRequestOptions {\n  data: Required<GetRequestOptions>['data'];\n}\n\nexport interface PutRequestOptions extends PostRequestOptions {}\n\nexport interface DeleteRequestOptions extends GetRequestOptions {}\n\nexport interface AdminRestApiClientOptions extends AdminApiClientOptions {\n  scheme?: 'https' | 'http';\n  defaultRetryTime?: number;\n  formatPaths?: boolean;\n}\n\nexport type RequestOptions = (GetRequestOptions | PostRequestOptions) & {\n  method: Method;\n};\n\nexport interface AdminRestApiClient {\n  get: (\n    path: string,\n    options?: GetRequestOptions,\n  ) => ReturnType<CustomFetchApi>;\n  put: (\n    path: string,\n    options?: PutRequestOptions,\n  ) => ReturnType<CustomFetchApi>;\n  post: (\n    path: string,\n    options?: PostRequestOptions,\n  ) => ReturnType<CustomFetchApi>;\n  delete: (\n    path: string,\n    options?: DeleteRequestOptions,\n  ) => ReturnType<CustomFetchApi>;\n}\n", "import {\n  CustomFetchApi,\n  LogContentTypes,\n  Logger,\n  generateHttpFetch,\n  getCurrentSupportedApiVersions,\n  validateApiVersion,\n  validateDomainAndGetStoreUrl,\n  validateRetries,\n} from '@shopify/graphql-client';\n\nimport {\n  validateRequiredAccessToken,\n  validateServerSideUsage,\n} from '../validations';\nimport {\n  ACCESS_TOKEN_HEADER,\n  CLIENT,\n  DEFAULT_CLIENT_VERSION,\n  DEFAULT_CONTENT_TYPE,\n  DEFAULT_RETRY_WAIT_TIME,\n  RETRIABLE_STATUS_CODES,\n} from '../constants';\n\nimport {\n  AdminRestApiClient,\n  AdminRestApiClientOptions,\n  DeleteRequestOptions,\n  GetRequestOptions,\n  HeaderOptions,\n  Method,\n  PostRequestOptions,\n  PutRequestOptions,\n  RequestOptions,\n  SearchParamFields,\n  SearchParams,\n} from './types';\n\nexport function createAdminRestApiClient({\n  storeDomain,\n  apiVersion,\n  accessToken,\n  userAgentPrefix,\n  logger,\n  customFetchApi = fetch,\n  retries: clientRetries = 0,\n  scheme = 'https',\n  defaultRetryTime = DEFAULT_RETRY_WAIT_TIME,\n  formatPaths = true,\n  isTesting,\n}: AdminRestApiClientOptions): AdminRestApiClient {\n  const currentSupportedApiVersions = getCurrentSupportedApiVersions();\n\n  const storeUrl = validateDomainAndGetStoreUrl({\n    client: CLIENT,\n    storeDomain,\n  }).replace('https://', `${scheme}://`);\n\n  const baseApiVersionValidationParams = {\n    client: CLIENT,\n    currentSupportedApiVersions,\n    logger,\n  };\n\n  validateServerSideUsage(isTesting);\n  validateApiVersion({\n    client: CLIENT,\n    currentSupportedApiVersions,\n    apiVersion,\n    logger,\n  });\n  validateRequiredAccessToken(accessToken);\n  validateRetries({client: CLIENT, retries: clientRetries});\n\n  const apiUrlFormatter = generateApiUrlFormatter(\n    storeUrl,\n    apiVersion,\n    baseApiVersionValidationParams,\n    formatPaths,\n  );\n  const clientLogger = generateClientLogger(logger);\n  const httpFetch = generateHttpFetch({\n    customFetchApi,\n    clientLogger,\n    defaultRetryWaitTime: defaultRetryTime,\n    client: CLIENT,\n    retriableCodes: RETRIABLE_STATUS_CODES,\n  });\n\n  const request = async (\n    path: string,\n    {\n      method,\n      data,\n      headers: requestHeadersObj,\n      searchParams,\n      retries = 0,\n      apiVersion,\n    }: RequestOptions,\n  ): ReturnType<CustomFetchApi> => {\n    validateRetries({client: CLIENT, retries});\n\n    const url = apiUrlFormatter(path, searchParams ?? {}, apiVersion);\n\n    const requestHeaders = normalizedHeaders(requestHeadersObj ?? {});\n    const userAgent = [\n      ...(requestHeaders['user-agent'] ? [requestHeaders['user-agent']] : []),\n      ...(userAgentPrefix ? [userAgentPrefix] : []),\n      `${CLIENT} v${DEFAULT_CLIENT_VERSION}`,\n    ].join(' | ');\n\n    const headers = normalizedHeaders({\n      'Content-Type': DEFAULT_CONTENT_TYPE,\n      ...requestHeaders,\n      Accept: DEFAULT_CONTENT_TYPE,\n      [ACCESS_TOKEN_HEADER]: accessToken,\n      'User-Agent': userAgent,\n    });\n\n    const body = data && typeof data !== 'string' ? JSON.stringify(data) : data;\n\n    return httpFetch(\n      [url, {method, headers, ...(body ? {body} : undefined)}],\n      1,\n      retries ?? clientRetries,\n    );\n  };\n\n  return {\n    get: (path: string, options?: GetRequestOptions) =>\n      request(path, {method: Method.Get, ...options}),\n    put: (path: string, options?: PutRequestOptions) =>\n      request(path, {method: Method.Put, ...options}),\n    post: (path: string, options?: PostRequestOptions) =>\n      request(path, {method: Method.Post, ...options}),\n    delete: (path: string, options?: DeleteRequestOptions) =>\n      request(path, {method: Method.Delete, ...options}),\n  };\n}\n\nfunction generateApiUrlFormatter(\n  storeUrl: string,\n  defaultApiVersion: string,\n  baseApiVersionValidationParams: Omit<\n    Parameters<typeof validateApiVersion>[0],\n    'apiVersion'\n  >,\n  formatPaths = true,\n) {\n  return (path: string, searchParams: SearchParams, apiVersion?: string) => {\n    if (apiVersion) {\n      validateApiVersion({\n        ...baseApiVersionValidationParams,\n        apiVersion,\n      });\n    }\n\n    function convertValue(\n      params: URLSearchParams,\n      key: string,\n      value: SearchParamFields,\n    ) {\n      if (Array.isArray(value)) {\n        value.forEach((arrayValue) =>\n          convertValue(params, `${key}[]`, arrayValue),\n        );\n        return;\n      } else if (typeof value === 'object') {\n        Object.entries(value).forEach(([objKey, objValue]) =>\n          convertValue(params, `${key}[${objKey}]`, objValue),\n        );\n        return;\n      }\n\n      params.append(key, String(value));\n    }\n\n    const urlApiVersion = (apiVersion ?? defaultApiVersion).trim();\n    let cleanPath = path.replace(/^\\//, '');\n    if (formatPaths) {\n      if (!cleanPath.startsWith('admin')) {\n        cleanPath = `admin/api/${urlApiVersion}/${cleanPath}`;\n      }\n      if (!cleanPath.endsWith('.json')) {\n        cleanPath = `${cleanPath}.json`;\n      }\n    }\n\n    const params = new URLSearchParams();\n    if (searchParams) {\n      for (const [key, value] of Object.entries(searchParams)) {\n        convertValue(params, key, value);\n      }\n    }\n    const queryString = params.toString() ? `?${params.toString()}` : '';\n\n    return `${storeUrl}/${cleanPath}${queryString}`;\n  };\n}\n\nfunction generateClientLogger(logger?: Logger): Logger {\n  return (logContent: LogContentTypes) => {\n    if (logger) {\n      logger(logContent);\n    }\n  };\n}\n\nfunction normalizedHeaders(headersObj: HeaderOptions): Record<string, string> {\n  const normalizedHeaders: Record<string, string> = {};\n  for (const [key, value] of Object.entries(headersObj)) {\n    normalizedHeaders[key.toLowerCase()] = Array.isArray(value)\n      ? value.join(', ')\n      : String(value);\n  }\n  return normalizedHeaders;\n}\n"],
  "mappings": "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",
  "names": ["headers", "data", "errors", "_a", "DEFAULT_CLIENT_VERSION", "CLIENT", "RETRIABLE_STATUS_CODES", "CLIENT", "CLIENT", "DEFAULT_CLIENT_VERSION", "Method", "CLIENT", "generateApiUrlFormatter", "generateClientLogger", "RETRIABLE_STATUS_CODES", "apiVersion", "DEFAULT_CLIENT_VERSION", "params", "normalizedHeaders"]
}
